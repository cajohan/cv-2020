https://zhuanlan.zhihu.com/p/663056120
https://zhuanlan.zhihu.com/p/539148506
https://www.nowcoder.com/feed/main/detail/4f5dc85c56a948e49199ab02442bcb06

概念题：
1. 是什么？
2. 做什么？
3. 解决什么？
4. 优缺点？

区分题：
1. 分别解释
2. 相同点
3. 不同点

实践题：
建议自己实践一下，然后写博客

JS：
1. 数据类型：
6+2
number, string, boolean, null, undefined, Object; bigint, symbol

2. 原型链是什么？
举例：一个普通对象x={}，x会有一个隐藏属性_???_，指向Object.prototype
x._???_ === Object.prototype
数组a=[]，会有Array.prototype,而Array.prototype也会有Object.prototype

解决什么？没有class情况下继承

3. this: call的第一个参数

4. new 做了什么？
 a. 创建一个临时对象
 b. 执行construct函数
 c. this指向临时对象
 d. 原型指向构造函数的原型
 e. 返回这个对象
  创建临时对象/新对象
  绑定原型
  指定 this = 临时对象
  执行构造函数
  返回临时对象

5. 立即执行函数，闭包，类继承，如何实现继承？
声明之后马上执行的函数；自由变量和访问它的函数；使用原型，或者extends，construct；

6. 手写节流防抖
cd；回城被打断；应用场景，提交数据，搜索框提示？
const throttle = (fn,time) => {
  let flag = true
  return (...args)=>{
    if(!flag) {return}
    fn.call(undefined,...args)
    flag = false
    setTimeout(()=>{
      flag = true
    },time)
  }
}
// 简洁版
const throttle = (f, time) => {
  let timer = null
  return (...args)=>{
    if(timer){
      return
    }
    f.call(undefined,...args)
    timer = setTimeout(()=>{
      timer = null
    },time)
  }
}
const debonce = (fn,time) => {
  let timer = null
  return (...args)=>{
    if(timer) {
      clearTimeout(timer)
    }
    timer = setTimeout(()=>{
      fn.call(undefined,...args)
      timer = null
    },time)
  }
}

7. 手写发布订阅
设计模式，即写代码套路。
函数首先关注输入输出。
映射，map,表，哈希表。任务队列=>函数先进先出
数据结构>算法
const eventHub = {
  queueMap: {},
  on: (name.fn) => {
    // 入队
    // 防御式编程
    eventHub.queueMap[name]=eventHub.queueMap[name]||[]
    eventHub.queueMap[name].push(fn)
    return undefined
  },
  emit: (name, data) => {
    const q = eventHub.map[name]
    if(!q) return
    q.map( f => f(data))
    return undefined
  },
  off: (name,fn) => {
    // 缩写/别名。alias; 只读不写
    const q = eventHub.map[name]
    if(!q){ return }
    const index = q.indexOf(fn)
    // 短路法，少写一个else
    if(index<0) {return}
    q.splice(index,1)
    return undefined
  },
  once: (name,fn)=>{
    const one = (...args)=>{
      fn(...args)
      eventHub.off('click',fn)
    }
    eventHub.on('click',one)
  }
}

eventHub.on('click',f1)
eventHub.off('click',f1)

setTimeout(()=>{
  eventHub.emit('click','frank)
},3000)

也可以用class：
class EventHub {
  map = {}
  on(name, fn) {
    this.map[name] = this.map[name] || []
    this.map[name].push(fn)
  }
  emit(name, data) {
    const fnList = this.map[name] || []
    fnList.forEach(fn => fn.call(undefined, data))
  }
  off(name, fn) {
    const fnList = this.map[name] || []
    const index = fnList.indexOf(fn)
    if(index < 0) return
    fnList.splice(index, 1)
  }
}
// 使用
const e = new EventHub()
e.on('click', (name)=>{
  console.log('hi '+ name)
})
e.on('click', (name)=>{
  console.log('hello '+ name)
})
setTimeout(()=>{
  e.emit('click', 'frank')
},3000)

8. 手写AJAX
Axios，Jquery，VueResource， window.fetch
封装

var xhr = new XMLHttpRequest()

xhr.open('GET', '/xxx')
xhr.onload = () => {}
xhr.onerror = () => {}

// 答案
xhr.onreadystatechage = function(){

}
xhr.send('{"name": "frank"}')

const ajax = (method, url, data, success, fail) => {
  var request = new XMLHttpRequest()
  request.open(method, url);
  request.onreadystatechange = function () {
    if(request.readyState === 4) {
      if(request.status >= 200 && request.status < 300 || request.status === 304) {
        success(request)
      }else{
        fail(request)
      }
    }
  };
  request.send();
}

9. 简版Promise，Promise.all
简版Promise:
class Promise2 {
  #status = 'pending'
  constructor(fn){
    this.q = []
    const resolve= (data) => {
      this.#status = 'fulfilled'
      const f1f2 = this.q.shift()
      if(!f1f2||!f1f2[0]) return
      const x = f1f2[0].call(undefined,data)
      if(x instanceof Promise2) {
        x.then((data)=>{
          resolve(data)
        },(r)=>{
          reject(r)
        })
      }else {
        resolve(x)
      }
    }
    const reject = (r) => {
      this.#status = 'rejected'
      const f1f2 = this.q.shift()
      if(!f1f2||!f1f2[0]) return
      const x = f1f2[1].call(undefined,data)
      if(x instanceof Promise2) {
        x.then((data)=>{
          resolve(data)
        },(r)=>{
          reject(r)
        })
      }else {
        resolve(x)
      }
    }
    fn.call(undefined, resolve, reject)
  }
  then(f1,f2){
    this.q.push([f1,f2])
  }
}
const p = new Promise2((res,rej) => {
  setTimeout(()=>{
    reject('wrong')
  },3000)
})

p.then((data)=>{console.log(data)},(r)=>{console.log(r)})

Promise.all:
1. 知道要在 Promise 上写而不是在原型上写
2. 知道 all 的参数（Promise 数组）和返回值（新 Promise 对象）
3. 知道用数组来记录结果
4. 知道只要有一个 reject 就整体 reject
Promise.myAll = function(list){
  const results = []
  let count = 0
  return new Promise((res,rej)=>{
    list.map((promise,index)=>{
      promise.then(res=>{
        results[index] = res
        count += 1
        if(count>=list.length){
          resolve(results)
        }
      }.rej=>{reject(rej)})
    })
  })
}
新vue2/2；工程化/2

10. 手写深拷贝
new Map()的key可以是对象

11. 数组去重
使用Set，Map
var uniq = function(a){
  var map = new Map()
  for(let i=0;i<a.length;i++){
    let number = a[i] // 1 ~ 3
    if(number === undefined){continue}
    if(map.has(number)){
      continue
    }
    map.set(number, true)
    
  }
  return [...map.keys()]
}

12. Dom

13. 事件委托
e.target和e.currentTarget //current是监听对象
14. 手写拖拽div

15. get和post的区别
幂等性
区别一：幂等性
由于 GET 是读，POST 是写，所以 GET 是幂等的，POST 不是幂等的。
由于 GET 是读，POST 是写，所以用浏览器打开网页会发送 GET 请求，想要 POST 打开网页要用 form 标签。
由于 GET 是读，POST 是写，所以 GET 打开的页面刷新是无害的，POST 打开的页面刷新需要确认。
由于 GET 是读，POST 是写，所以 GET 结果会被缓存，POST 结果不会被缓存。
由于 GET 是读，POST 是写，所以 GET 打开的页面可被书签收藏，POST 打开的不行。
区别二：请求参数
通常，GET 请求参数放在 url 里，POST 请求数据放在 body（消息体）里。（这里注意老师的讲解）
GET 比 POST 更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。（xjb扯）
GET 请求参数放在 url 里是有长度限制的，而 POST 放在 body 里没有长度限制。（xjb扯）
区别三：TCP packet
GET 产生一个 TCP 数据包；POST 产生两个或以上 TCP 数据包。

16. http缓存
	          缓存（强缓存）	内容协商（弱缓存）
HTTP 1.1	Cache-Control: max-age=3600 Etag: ABC	If-None-Match: ABC 响应状态码：304 或 200
HTTP 1.0	Expires: Wed, 21 Oct 2015 02:30:00 GMT Last-Modified: Wed, 21 Oct 2015 01:00:00 GMT	If-Modified-Since: Wed, 21 Oct 2015 01:00:00 GMT 响应状态码：304 或 200
面试官可能还会提到 Pragma ，但 MDN 已经明确不推荐使用它。
17. http和https

HTTPS = HTTP + SSL/TLS（安全层）
区别列表
HTTP 是明文传输的，不安全；HTTPS 是加密传输的，非常安全。
HTTP 使用 80 端口，HTTPS 使用 443 端口。
HTTP 较快，HTTPS 较慢。
HTTPS 的证书一般需要购买（但也有免费的），HTTP 不需要证书。

18. TCP三次握手和四次挥手
建立 TCP 连接时 server 与 client 会经历三次握手
浏览器向服务器发送 TCP 数据：SYN(seq=x)
服务器向浏览器发送 TCP 数据：ACK(seq=x+1) SYN(y)
浏览器向服务器发送 TCP 数据：ACK(seq=y+1)
关闭 TCP 连接时 server 与 client 会经历四次挥手
浏览器向服务器发送 TCP 数据：FIN(seq=x)
服务器向浏览器发送 TCP 数据：ACK(seq=x+1)
服务器向浏览器发送 TCP 数据：FIN(seq=y)
浏览器向服务器发送 TCP 数据：ACK(seq=y+1)
为什么 2、3 步骤不合并起来呢？看起来是脱裤子放屁。

答案：2、3 中间服务器很可能还有数据要发送，不能提前发送 FIN。

19. 同源和跨域
1. JSONP
只能get；没有认证；改动小
2. CORS 

20. Cookie，Session，LS，SS的区别
Cookie V.S. LocalStorage
主要区别是 Cookie 会被发送到服务器，而 LocalStorage 不会
Cookie 一般最大 4k，LocalStorage 可以用 5Mb 甚至 10Mb（各浏览器不同）
LocalStorage V.S. SessionStorage
LocalStorage 一般不会自动过期（除非用户手动清除）
SessionStorage 在回话结束时过期（如关闭浏览器之后，具体由浏览器自行决定）
Cookie V.S. Session
Cookie 存在浏览器的文件里，Session 存在服务器的文件里
Session 是基于 Cookie 实现的，具体做法就是把 SessionID 存在 Cookie 里

21. TS和JS
a. TS 和 JS 的区别是什么？有什么优势？
语法层面：TypeScript = JavaScript + Type（TS 是 JS 的超集）
执行环境层面：浏览器、Node.js 可以直接执行 JS，但不能执行 TS（Deno 可以执行 TS）
编译层面：TS 有编译阶段，JS 没有编译阶段（只有转译阶段和 lint 阶段）
编写层面：TS 更难写一点，但是类型更安全
文档层面：TS 的代码写出来就是文档，IDE 可以完美提示。JS 的提示主要靠 TS

b. any、unknown、never 的区别是什么？
any V.S. unknown
二者都是顶级类型（top type），任何类型的值都可以赋值给顶级类型变量：

let foo: any = 123; // 不报错
let bar: unknown = 123; // 不报错
但是 unknown 比 any 的类型检查更严格，any 什么检查都不做，unknown 要求先收窄类型：

const value: unknown = "Hello World";
const someString: string = value; 
// 报错：Type 'unknown' is not assignable to type 'string'.(2322)
const value: unknown = "Hello World";
const someString: string = value as string; // 不报错
如果改成 any，基本在哪都不报错。所以能用 unknown 就优先用 unknown，类型更安全一点。

never
never 是底类型，表示不应该出现的类型，这里有一个尤雨溪给出的例子：

interface A {
  type: 'a'
}

interface B {
  type: 'b'
}

type All = A | B

function handleValue(val: All) {
  switch (val.type) {
    case 'a':
      // 这里 val 被收窄为 A
      break
    case 'b':
      // val 在这里是 B
      break
    default:
      // val 在这里是 never
      const exhaustiveCheck: never = val
      break
  }
}

c. type 和 interface 的区别是什么？
官方给出的文档说明：

组合方式：interface 使用 extends 来实现继承，type 使用 & 来实现联合类型。
扩展方式：interface 可以重复声明用来扩展，type 一个类型只能声明一次
范围不同：type 适用于基本类型，interface 一般不行。
命名方式：interface 会创建新的类型名，type 只是创建类型别名，并没有新创建类型。

d. TS 工具类型 Partial、Required、Readonly、Exclude、Extract、Omit、ReturnType 的作用和实现？
将英文翻译为中文。
Partial 部分类型
Required 必填类型
Readonly 只读类型
Exclude 排除类型
Extract 提取类型
Pick/Omit 排除 key 类型
ReturnType 返回值类型
举例说明每个工具类型的用法。

22. Vue 2
a. Vue 2 的生命周期钩子有哪些？数据请求放在哪个钩子？
Vue 2 文档写得很清楚，红色空心框中的文字皆为生命周期钩子：

create x 2 (before + ed) - SSR
mount x 2
update x 2
destroy x 2
还有三个写在钩子列表里：

activated
deactivated
errorCaptured
请求放在 mounted 里面，因为放在其他地方都不合适（xjb扯）。

b. Vue 2 组件间通信方式有哪些？
父子组件：使用「props 和事件」进行通信
爷孙组件：
使用两次父子组件间通信来实现
使用「provide + inject」来通信
任意组件：使用 eventBus = new Vue() 来通信
主要API 是 eventBus.$on 和 eventBus.$emit
缺点是事件多了就很乱，难以维护
任意组件：使用 Vuex 通信（Vue 3 可用 Pinia 代替 Vuex）

c. Vuex 用过吗？怎么理解？
背下文档第一句：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库
说出核心概念的名字和作用：store/State/Getter/Mutation/Action/Module
store 是个大容器，包含以下所有内容
State 用来读取状态，带有一个 mapState 辅助函数
Getter 用来读取派生状态，附有一个 mapGetters 辅助函数
Mutation 用于同步提交状态变更，附有一个 mapMutations 辅助函数
Action 用于异步变更状态，但它提交的是 mutation，而不是直接变更状态。
Module 用来给 store 划分模块，方便维护代码
常见追问：Mutation 和 Action 为什么要分开？

答案：为了让代码更易于维护。（可是 Pinia 就把 Mutation 和 Action 合并了呀）

完。

d. VueRouter 用过吗？怎么理解？
背下文档第一句：Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。
说出核心概念的名字和作用：router-link router-view 嵌套路由、Hash 模式和 History 模式、导航守卫、懒加载
常见追问：
Hash 模式和 History 模式的区别？
一个用的 Hash，一个用的 History API
一个不需要后端 nginx 配合，一个需要
导航守卫如何实现登录控制？
router.beforeEach((to, from, next) => {
  if (to.path === '/login') return next()
  if (to是受控页面 && 没有登录) return next('/login')
  next()
})

e. Vue 2 是如何实现双向绑定的？
说明一般使用 v-model / .sync 实现，`v-model` 是 v-bind:value 和 v-on:input 的语法糖
v-bind:value 实现了 data ⇒ UI 的单向绑定
v-on:input 实现了 UI ⇒ data 的单向绑定
加起来就是双向绑定了
这两个单向绑定是如何实现的呢？
前者通过 Object.defineProperty API 给 data 创建 getter 和 setter，用于监听 data 的改变，data 一变就会安排改变 UI
后者通过 template compiler 给 DOM 添加事件监听，DOM input 的值变了就会去修改 data。
网上的博客讲得很绕，你可以尝试理解看看。

23. Vue 3 押题
a. Vue 3 为什么使用 Proxy？
弥补 Object.defineProperty 的两个不足
动态创建的 data 属性需要用 Vue.set 来赋值，Vue 3 用了 Proxy 就不需要了
基于性能考虑，Vue 2 篡改了数组的 7 个 API，Vue 3 用了 Proxy 就不需要了
defineProperty 需要提前递归地遍历 data 做到响应式，而 Proxy 可以在真正用到深层数据的时候再做响应式（惰性）

b. Vue 3 为什么使用 Composition API？
答案参考尤雨溪的博客：Vue Function-based API RFC - 知乎 (zhihu.com)

Composition API 比 mixins、高阶组件、extends、Renderless Components 等更好，原因有三：
模版中的数据来源不清晰。
命名空间冲突。
性能。
更适合 TypeScript

c. Vue 3 对比 Vue 2 做了哪些改动？
官方文档写了（中文在这），这里列出几个容易被考的：

createApp() 代替了 new Vue()
v-model 代替了以前的 v-model 和 .sync
根元素可以有不止一个元素了
新增 Teleport 传送门
destroyed 被改名为 unmounted 了（before 当然也改了）
ref 属性支持函数了
其他建议自己看看写写。

24. React 押题
a. 虚拟 DOM 的原理是什么？
是什么
虚拟 DOM 就是虚拟节点（这句汉化很重要）。React 用 JS 对象来模拟 DOM 节点，然后将其渲染成真实的 DOM 节点。

怎么做
第一步是模拟

用 JSX 语法写出来的 div 其实就是一个虚拟节点：

<div id="x">
  <span class="red">hi</span>
</div>
这代码会得到这样一个对象：

{
  tag: 'div',
  props: {
    id: 'x'
  },
  children: [
    {
      tag: 'span',
      props: {
        className: 'red'
      },
      children: [
        'hi'
      ]
    }
  ]
}
能做到这一点是因为 JSX 语法会被转译为 createElement 函数调用（也叫 h 函数），如下：

React.createElement("div", { id: "x"}, 
  React.createElement("span", { class: "red" }, "hi")
)
第二步是将虚拟节点渲染为真实节点

function render(vdom) {
  // 如果是字符串或者数字，创建一个文本节点
  if (typeof vdom === 'string' || typeof vdom === 'number') {
    return document.createTextNode(vdom)
  }
  const { tag, props, children } = vdom
  // 创建真实DOM
  const element = document.createElement(tag)
  // 设置属性
  setProps(element, props)
  // 遍历子节点，并获取创建真实DOM，插入到当前节点
  children
    .map(render)
    .forEach(element.appendChild.bind(element))

  // 虚拟 DOM 中缓存真实 DOM 节点
  vdom.dom = element
  
  // 返回 DOM 节点
  return element
}

function setProps // 略
function setProp // 略

// 作者：Shenfq
// 链接：https://juejin.cn/post/6844903870229905422
注意，如果节点发生变化，并不会直接把新虚拟节点渲染到真实节点，而是先经过 diff 算法得到一个 patch 再更新到真实节点上。

解决了什么问题
DOM 操作性能问题。通过虚拟 DOM 和 diff 算法减少不必要的 DOM 操作，保证性能不太差
DOM 操作不方便问题。以前各种 DOM API 要记，现在只有 setState
优点
为 React 带来了跨平台能力，因为虚拟节点除了渲染为真实节点，还可以渲染为其他东西。
让 DOM 操作的整体性能更好，能（通过 diff）减少不必要的 DOM 操作。
缺点
性能要求极高的地方，还是得用真实 DOM 操作（目前没遇到这种需求）
React 为虚拟 DOM 创造了合成事件，跟原生 DOM 事件不太一样，工作中要额外注意
所有 React 事件都绑定到根元素，自动实现事件委托
如果混用合成事件和原生 DOM 事件，有可能会出 bug
如何解决缺点
不用 React，用 Vue 3（笑）

b. React 或 Vue 的 DOM diff 算法是怎样的？
是什么
DOM diff 就是对比两棵虚拟 DOM 树的算法（废话很重要）。当组件变化时，会 render 出一个新的虚拟 DOM，diff 算法对比新旧虚拟 DOM 之后，得到一个 patch，然后 React 用 patch 来更新真实 DOM。

怎么做
首先对比两棵树的根节点
如果根节点的类型改变了，比如 div 变成了 p，那么直接认为整棵树都变了，不再对比子节点。此时直接删除对应的真实 DOM 树，创建新的真实 DOM 树。
如果根节点的类型没变，就看看属性变了没有
如果没变，就保留对应的真实节点
如果变了，就只更新该节点的属性，不重新创建节点。
更新 style 时，如果多个 css 属性只有一个改变了，那么 React 只更新改变的。
然后同时遍历两棵树的子节点，每个节点的对比过程同上。
情况一
<ul>
  <li>A</li>
  <li>B</li>
</ul>

<ul>
  <li>A</li>
  <li>B</li>
  <li>C</li>
</ul>
React 依次对比 A-A、B-B、空-C，发现 C 是新增的，最终会创建真实 C 节点插入页面。

情况二
<ul>
  <li>B</li>
  <li>C</li>
</ul>

<ul>
  <li>A</li>
  <li>B</li>
  <li>C</li>
</ul>
React 对比 B-A，会删除 B 文本新建 A 文本；对比 C-B，会删除 C 文本，新建 B 文本；（注意，并不是边对比边删除新建，而是把操作汇总到 patch 里再进行 DOM 操作。）对比空-C，会新建 C 文本。

你会发现其实只需要创建 A 文本，保留 B 和 C 即可，为什么 React 做不到呢？

因为 React 需要你加 key 才能做到：

<ul>
  <li key="b">B</li>
  <li key="c">C</li>
</ul>

<ul>
  <li key="a">A</li>
  <li key="b">B</li>
  <li key="c">C</li>
</ul>
React 先对比 key 发现 key 只新增了一个，于是保留 b 和 c，新建 a。

以上是 React 的 diff 算法（源码分析在下一节补充视频中，时长一小时，有能力者选看）。

但面试官想听的可能是 Vue 的「双端交叉对比」算法：

c. 补充：React DOM diff 和 Vue DOM diff 的区别？
先纠正之前的一个细节错误：

错：我认为数组存储的是整棵树。

对：其实数组存储的是拥有相同爸爸的一群子节点。



React DOM diff 和 Vue DOM diff 的区别：

React 是从左向右遍历对比，Vue 是双端交叉对比。
React 需要维护三个变量（有点扯），Vue 则需要维护四个变量。
Vue 整体效率比 React 更高，举例说明：假设有 N 个子节点，我们只是把最后子节点移到第一个，那么
React 需要进行借助 Map 进行 key 搜索找到匹配项，然后复用节点
Vue 会发现移动，直接复用节点


附 React DOM diff 代码查看流程：

运行 git clone https://github.com/facebook/react.git
运行 cd react; git switch 17.0.2
用 VSCode 或 WebStorm 打开 react 目录
打开 packages/react-reconciler/src/ReactChildFiber.old.js 第 1274 行查看旧版代码，或打开 packages/react-reconciler/src/ReactChildFiber.new.js 第 1267 行查看新代码（实际上一样）
忽略所有警告和报错，因为 React JS 代码中有不是 JS 的代码
折叠所有代码
根据 React 文档中给出的场景反复在大脑中运行代码
场景0：单个节点，会运行到 reconcileSingleElement。接下来看多个节点的情况。
场景1：没 key，标签名变了，最终会走到 createFiberFromElement（存疑）
场景2：没 key，标签名没变，但是属性变了，最终走到 updateElement 里的 useFiber
场景3：有 key，key 的顺序没变，最终走到 updateElement
场景4：有 key，key 的顺序变了，updateSlot 返回 null，最终走到 mapRemainingChildren、updateFromMap 和 updateElement(matchedFiber)，整个过程较长，效率较低
代码查看要点：
声明不看（用到再看）
if 先不看（但 if else 要看）
函数调用必看
必备快捷键：折叠所有、展开、向前、向后、查看定义

d. React 有哪些生命周期钩子函数？数据请求放在哪个钩子里？
总得来说：

挂载时调用 constructor，更新时不调用
更新时调用 shouldComponentUpdate 和 getSnapshotBeforeUpdate，挂载时不调用
should... 在 render 前调用，getSnapshot... 在 render 后调用
请求放在 componentDidMount 里，最好写博客，容易忘。

e. React 如何实现组件间通信
父子组件通信：props + 函数
爷孙组件通信：两层父子通信或者使用 Context.Provider 和 Context.Consumer
任意组件通信：其实就变成了状态管理了
Redux 
Mobx
Recoil

f. 你如何理解 Redux？
文档第一句话背下来：Redux 是一个状态管理库/状态容器。 
把 Redux 的核心概念说一下：
State
Action = type + payload 荷载
Reducer 
Dispatch 派发
Middleware
把 ReactRedux 的核心概念说一下：
connect()(Component)
mapStateToProps
mapDispatchToProps
说两个常见的中间件 redux-thunk redux-promise

g. 什么是高阶组件 HOC？
参数是组件，返回值也是组件的函数。什么都能做，所以抽象问题就具体回答。

举例说明即可：

React.forwardRef
ReactRedux 的 connect
ReactRouter 的 withRouter
参考阅读：「react进阶」一文吃透React高阶组件(HOC) - 掘金 (juejin.cn)

h. React Hooks 如何模拟组件生命周期？
模拟 componentDidMount
模拟 componentDidUpdate
模拟 componentWillUnmount
代码示例如下：

import { useEffect,useState,useRef } from "react";
import "./styles.css";

export default function App() {
  const [visible, setNextVisible] = useState(true)
  const onClick = ()=>{
    setNextVisible(!visible)
  }
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      {visible ? <Frank/> : null}
      <div>
        <button onClick={onClick}>toggle</button>
        </div>
     
    </div>
  );
}

function Frank(props){
  const [n, setNextN] = useState(0)
  const first = useRef(true)
  useEffect(()=>{
    if(first.current === true ){
      return
    }
    console.log('did update')
  })
  useEffect(()=>{
    console.log('did mount')
    first.current = false
    return ()=>{
      console.log('did unmount')
    }
  }, [])
  
  const onClick = ()=>{
    setNextN(n+1)
  }
  return (
    <div>Frank
      <button onClick={onClick}>+1</button>
    </div>
  )
}
完。

25. Node.js 
a. Node.js 的 EventLoop 是什么？
Node.js 将各种函数（也叫任务或回调）分成至少 6 类，按先后顺序调用，因此将时间分为六个阶段：

timers 阶段（setTimeout）
I/O callbacks 该阶段不用管
idle, prepare 该阶段不用管
poll 轮询阶段，停留时间最长，可以随时离开。
主要用来处理 I/O 事件，该阶段中 Node 会不停询问操作系统有没有文件数据、网络数据等
如果 Node 发现有 timer 快到时间了或者有 setImmediate 任务，就会主动离开 poll 阶段
check 阶段，主要处理 setImmediate 任务
close callback 该阶段不用管
Node.js 会不停的从 1 ~ 6 循环处理各种事件，这个过程叫做事件循环（Event Loop）。

nextTick
process.nextTick(fn) 的 fn 会在什么时候执行呢？

在 Node.js 11 之前，会在每个阶段的末尾集中执行（俗称队尾执行）。

在 Node.js 11 之后，会在每个阶段的任务间隙执行（俗称插队执行）。

浏览器跟 Node.js 11 之后的情况类似。可以用 window.queueMicrotask 模拟 nextTick。

Promise
Promise.resolve(1).then(fn) 的 fn 会在什么时候执行？

这要看 Promise 源码是如何实现的，一般都是用 process.nextTick(fn) 实现的，所以直接参考 nextTick。

async / await 
这是 Promise 的语法糖，所以直接转为 Promise 写法即可。

面试题1：

setTimeout(() => {
  console.log('setTimeout')
})

setImmediate(() => {
  console.log('setImmediate')
})
// 在 Node.js 运行会输出什么？
// A setT setIm
// B setIm setT
// C 出错
// D A 或 B
// 在浏览器执行会怎样？


面试题2：

async function async1(){
    console.log('1')                   // 2
    async2().then(()=>{
      console.log('2')
    })
    
}
async function async2(){
    console.log('3')                   // 3
}
console.log('4')                        // 1
setTimeout(function(){
    console.log('5') 
},0)  
async1();
new Promise(function(resolve){
    console.log('6')                    // 4
    resolve();
}).then(function(){
    console.log('7')
})
console.log('8')                           // 5  
//4 1 3 6 8 2 7 5 

b. 浏览器里的微任务和任务是什么？
浏览器中并不存在宏任务，宏任务（Macrotask）是 Node.js 发明的术语。

浏览器中只有任务（Task）和微任务（Microtask）。

使用 script 标签、setTimeout 可以创建任务。
使用 Promise#then、window.queueMicrotask、MutationObserver、Proxy 可以创建微任务。
执行顺序是怎样的呢？

微任务会在任务间隙执行（俗称插队执行）。

⚠️
注意，微任务不能插微任务的队，微任务只能插任务的队。
// next = [0, 4x, 1, 2, 3, 5, 6]
Promise.resolve()
	.then(() => {
	    console.log(0);
	    return Promise.resolve('4x');
	})
	
	.then((res) => {console.log(res)})
	
Promise.resolve().then(() => {console.log(1);})
                 .then(() => {console.log(2);}, ()=>{console.log(2.1)})
                 .then(() => {console.log(3);})
                 .then(() => {console.log(5);})
                 .then(() => {console.log(6);})

c. express.js 和 koa.js 的区别是什么？
中间件模型不同：express 的中间件模型为线型，而 koa 的为U型（洋葱模型）。
对异步的处理不同：express 通过回调函数处理异步，而 koa 通过generator 和 async/await 使用同步的写法来处理异步，后者更易维护，但彼时 Node.js 对 async 的兼容性和优化并不够好，所以没有流行起来。
功能不同：express 包含路由、渲染等特性，而 koa 只有 http 模块。
总得来说，express 功能多一点，写法烂一点，兼容性好一点，所以当时更流行。虽然现在 Node.js 已经对 await 支持得很好了，但是 koa 已经错过了风口。

不过 express 和 koa 的作者都是 TJ 大神。

26. 工程化押题（webpack、vite）
a. 常见 loader 和 plugin 有哪些？二者的区别是什么？
你可以记住：

babel-loader 把 JS/TS 变成  JS
ts-loader 把 TS 变成 JS，并提示类型错误
markdown-loader 把 markdown 变成 html
html-loader 把 html 变成 JS 字符串
sass-loader 把 SASS/SCSS 变成 CSS
css-loader 把 CSS 变成 JS 字符串
style-loader 把 JS 字符串变成 style 标签
postcss-loader 把 CSS 变成更优化的 CSS
vue-loader 把单文件组件（SFC）变成 JS 模块
thread-loader 用于多进程打包

你可以记住这些：

html-webpack-plugin 用于创建 HTML 页面并自动引入 JS 和 CSS
clean-webpack-plugin 用于清理之前打包的残余文件
mini-css-extract-plugin 用于将 JS 中的 CSS 抽离成单独的 CSS 文件
SplitChunksPlugin 用于代码分包（Code Split）
DllPlugin + DllReferencePlugin 用于避免大依赖被频繁重新打包，大幅降低打包时间
eslint-webpack-plugin 用于检查代码中的错误
DefinePlugin 用于在 webpack config 里添加全局变量
copy-webpack-plugin 用于拷贝静态文件到 dist

二者的区别
loader 是文件加载器（这句废话很重要）
功能：能够对文件进行编译、优化、混淆（压缩）等，比如 babel-loader / vue-loader
运行时机：在创建最终产物之前运行
plugin 是 webpack 插件（这句废话也很重要）
功能：能实现更多功能，比如定义全局变量、Code Split、加速编译等
运行时机：在整个打包过程（以及前后）都能运行

b. webpack 如何解决开发时的跨域问题？
在开发时，我们的页面在 localhost:8080，JS 直接访问后端接口（如 https://xiedaimala.com 或 http://localhost:3000）会报跨域错误。

为了解决这个问题，可以在 webpack.config.js 中添加如下配置：

module.exports = {
  //...
  devServer: {
    proxy: {
      '/api': {
        target: 'http://xiedaimala.com',
        changeOrigin: true,
      },
    },
  },
};
此时，在 JS 中请求 /api/users 就会自动被代理到 http://xiedaimala.com/api/users 。

如果希望请求中的 Origin 从 8080 修改为 xiedaimala.com，可以添加 changeOrigin: true 。

如果要访问的是 HTTPS API，那么就需要配置 HTTPS 证书，否则会报错。

不过，如果在 target 下面添加 secure: false ，就可以不配置证书且忽略 HTTPS 报错。

总之，记住常用选项就行了。

c. 如何实现 tree-shaking？
是什么
tree-shaking 就是让没有用到的 JS 代码不打包，以减小包的体积。

怎么做
背下文档说的这几点：

怎么删
使用 ES Modules 语法（即 ES6 的 import 和 export 关键字）
CommonJS 语法无法 tree-shaking（即 require 和 exports 语法）
引入的时候只引用需要的模块
要写 import {cloneDeep} from 'lodash-es' 因为方便 tree-shaking
不要写 import _ from 'lodash' 因为会导致无法 tree-shaking 无用模块
怎么不删：在 package.json 中配置 sideEffects，防止某些文件被删掉
比如我 import 了 x.js，而 x.js 只是添加了 window.x 属性，那么 x.js 就要放到 sideEffects 里
比如所有被 import 的 CSS 都要放在 sideEffects 里
怎么开启：在 webpack config 中将 mode 设置为 production（开发环境没必要 tree-shaking）
mode: production 给 webpack 加了非常多优化。

d. 如何提高 webpack 构建速度？
使用 DllPlugin 将不常变化的代码提前打包，并复用，如 vue、react
使用 thread-loader 或 HappyPack（过时）进行多线程打包
处于开发环境时，在 webpack config 中将 cache 设为 true，也可用 cache-loader（过时）
处于生产环境时，关闭不必要的环节，比如可以关闭 source map
网传的 HardSourceWebpackPlugin 已经一年多没更新了，谨慎使用

e. webpack 与 vite 的区别是什么？
开发环境区别
vite 自己实现 server，不对代码打包，充分利用浏览器对 <script type=module> 的支持
假设 main.js 引入了 vue
该 server 会把 import { createApp } from 'vue' 改为 import { createApp } from "/node_modules/.vite/vue.js" 这样浏览器就知道去哪里找 vue.js 了
webpack-dev-server 常使用 babel-loader 基于内存打包，比 vite 慢很多很多很多
该 server 会把 vue.js 的代码（递归地）打包进 main.js
生产环境区别
vite 使用 rollup + esbuild 来打包 JS 代码
webpack 使用 babel 来打包 JS 代码，比 esbuild 慢很多很多很多
webpack 能使用 esbuild 吗？可以，你要自己配置（很麻烦）。
文件处理时机
vite 只会在你请求某个文件的时候处理该文件
webpack 会提前打包好 main.js，等你请求的时候直接输出打包好的 JS 给你
目前已知 vite 的缺点有：

热更新常常失败，原因不清楚
有些功能 rollup 不支持，需要自己写 rollup 插件
不支持非现代浏览器

f. webpack 怎么配置多页应用？
这是对应的 webpack config：

const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: {
    app: './src/app.js',
    admin: './src/admin.js',
  },
  plugins: [
    new HtmlWebpackPlugin({
      filename: 'index.html',
      chunks: ['app']
    }),
    new HtmlWebpackPlugin({
      filename: 'admin.html',
      chunks: ['admin']
    })
  ],
};
但是，这样配置会有一个「重复打包」的问题：假设 app.js 和 admin.js 都引入了 vue.js，那么 vue.js 的代码既会打包进 app.js，也会打包进 admin.js。我们需要使用 optimization.splitChunks 将共同依赖单独打包成 common.js（HtmlWebpackPlugin 会自动引入 common.js）。

如何支持无限多页面呢？
写点 Node.js 代码不就实现了么？

const HtmlWebpackPlugin = require('html-webpack-plugin');
const fs = require('fs')
const path = require('path')

const filenames = fs.readdirSync('./src/pages')
  .filter(file => file.endsWith('.js'))
  .map(file => path.basename(file, '.js'))

const entries = filenames.reduce((result, name) => (
  { ...result, [name]: `./src/pages/${name}.js` }
), {})
const plugins = filenames.map((name) =>
  new HtmlWebpackPlugin({
    filename: name + '.html',
    chunks: [name]
  })
)

module.exports = {
  entry: {
    ...entries
  },
  plugins: [
    ...plugins
  ],
};

g. swc、esbuild 是什么？
swc
实现语言：Rust

功能：编译 JS/TS、打包 JS/TS

优势：比 babel 快很多很多很多（20倍以上）

能否集成进 webpack：能

使用者：Next.js、Parcel、Deno、Vercel、ByteDance、Tencent、Shopify……

做不到：

对 TS 代码进行类型检查（用 tsc 可以）
打包 CSS、SVG
esbuild
实现语言：Go

功能：同上

优势：比 babel 快很多很多很多很多很多很多（10~100倍）

能否集成进 webpack：能

使用者：vite、vuepress、snowpack、umijs、blitz.js 等

做不到：

对 TS 代码进行类型检查
打包 CSS、SVG

27. 非技术题
a. 你为什么从上一家公司离职？
原则：

上一家公司对我很好
我对上一家公司很满意
举例：

跟女朋友讨论后慎重决定去女朋友家乡所在省会发展（后来变卦、分手）
加班到生病需要静养（不想吃空饷）
公司倒闭、公司改组、公司转型（大批人被解雇）

b. 你的缺点是什么？
说确实存在的缺点
说出你的改进过程
说出你的进步程度

c. 你的薪资要求是多少？
原则：

心理价位 + 2~3k
每人只有一次报价机会，说了就不好改口，所以尽量高
如果对方砍价，那就做出让步姿势
如果对方不砍价，可能你还是要低了，也可能对方财大气粗
只要过了面试，你就没有理由压我工资
工资流水怎么办？隐私你都问，可以给，不过你要知道流水跟薪资无关，不接受压价
没工作经验？有项目经验，而且我过了面试，说明我的能力甚至比有工作经验的还强
如果对方报价低于预期，就收作备胎，继续面下一家
要求我明天到岗？不好意思，目前的工作还没交接完/下周要去老家当伴郎/伴娘

d. 何时可以到岗？
错误答案：随时到岗。

如果公司强烈要求你明天到岗，就一定不要去，说明是个火坑。

可以接受的答案：

下周三。给自己面试下一家公司留足一周时间
最晚下个月15号。等工作交接完毕就可以了，实际上还是留时间面试下一家。

e. 你对加班的看法？
标准答案：

我不赞同无效的加班、看似在加班实际上却什么都没做（我从来不划水摸鱼）
当公司的重要项目有延期风险，那么为了保证项目如期上线是可以加班的（公司还有不重要的项目？）
另外，我觉得更重要的是提升自己的工作效率，降低项目延期的风险（我好有责任心）
上面的观点，无论是「支持加班」的人还是「不支持加班」的人，都无法反驳。

f. 你遇到最难的 bug 是什么？
这题主要靠你讲一个「一波三折」的故事。

接下来是我的例子
问题：Go 桌面项目打开是空白。

解决办法：debug，搜索，读 issue，找到答案。

怎么把这个故事讲得曲折一点？

用户说页面空白，而且无法复现
有一天我下定决心解决这个问题，于是远程协助了用户
我在用户电脑上 debug，发现了报错原因
但很奇怪，我的电脑不会有这个报错
于是我上网搜索，终于发现了类似的报错
顺腾摸瓜，发现有人有一样的报错
爬楼，发现有个用户留言，是 Windows 注册表的问题
于是我修改了用户的注册表，发现 bug 消除了
我总结发现这是因为 Go 的这个 gin 库偷懒用到了注册表
于是我向这个库作者反馈了
并自己写博客记录了这个问题（没写博客就别说这句）
重点：

要体现你的主观能动性
要体现你坚持不懈、念念不忘
要体现你的责任心

28. 算法
a. 大数相加
题目

const add = (a, b) => {
  ...
  return sum
}

console.log(add("11111111101234567","77777777707654321"))
console.log(add("911111111101234567","77777777707654321"))
答案

const add = (a, b) => {
  const maxLength = Math.max(a.length, b.length)
  let overflow = false
  let sum = ''
  for(let i = 1; i <= maxLength; i++){
    const ai = a[a.length-i] || '0'
    const bi = b[b.length-i] || '0'
    let ci = parseInt(ai) + parseInt(bi) + (overflow ? 1 : 0)
    overflow = ci >= 10
    ci = overflow ? ci - 10 : ci
    sum = ci + sum 
  }
  sum = overflow ? '1' + sum : sum
  return sum
}

console.log(add("11111111101234567","77777777707654321"))
console.log(add("911111111101234567","77777777707654321"))
15位加速版：

const add = (a, b) => {
  const maxLength = Math.max(a.length, b.length)
  let overflow = false
  let sum = ''
  for(let i = 0; i < maxLength; i+=15){
    const ai = a.substring(a.length-i -15, a.length-i) || '0'
    const bi = b.substring(b.length-i -15, b.length-i) || '0'
    let ci = parseInt(ai) + parseInt(bi) + (overflow ? 1 : 0)
    overflow = ci > 999999999999999 // 15 个 9
    ci = overflow ? ci - (999999999999999+1) : ci
    sum = ci + sum 
  }
  sum = overflow ? '1' + sum : sum
  return sum
}

console.log(add("11111111101234567","77777777707654321"))
console.log(add("911111111101234567","77777777707654321"))

const add = (a, b) => {
  const maxLength = Math.max(a.length, b.length);
  let overflow = 0; // 初始溢出为0
  let sum = '';

  for (let i = 0; i < maxLength || overflow; i += 15) {
    const ai = parseInt(a.substring(a.length - i - 15, a.length - i) || '0');
    const bi = parseInt(b.substring(b.length - i - 15, b.length - i) || '0');
    
    let ci = ai + bi + overflow;
    overflow = Math.floor(ci / 1e15); // 1e15 是 15 个 0
    ci %= 1e15;

    // 将 ci 转为字符串，并在前面补0
    const ciStr = ci.toString().padStart(15, '0');
    
    // 将当前结果插入到最前面
    sum = ciStr + sum;
  }

  return sum.replace(/^0+/, '') || '0'; // 移除结果前面的0，保留至少一个0
};

// 测试
const result = add(

  '1'
);

console.log(result);

其他思路：

转为数组，然后倒序，遍历
使用队列，使用 while 循环
可以自行搜索。

b. 两数之和
题目
const numbers = [2,7,11,15]
const target = 9
const twoSum = (numbers, target) => {
  // ...
}
console.log(twoSum(numbers, target))
// [0, 1] 或 [1, 0]

// 出题者保证
// 1. numbers 中的数字不会重复
// 2. 只会存在一个有效答案
答案
const numbers = [2,7,11,15]
const target = 9
const twoSum = (numbers, target) => {
  const map = {}
  for(let i = 0; i < numbers.length; i++){
    const number = numbers[i]
    const number2 = target - number
    if(number2 in map){
      const number2Index = map[number2]
      return [i, number2Index]
    } else {
      map[number] = i
    }
  }
  return []
}
console.log(twoSum(numbers, target))
上面是给菜鸟看的，所以有多余的中间变量，可以删掉。

c. 无重复最长子串的长度
const lengthOfLongestSubstring = (str) => {
  //...
}

console.log(lengthOfLongestSubstring("abcabcbb"))
// 3
答案：滑动窗口法
我称之为「两根手指法」。

var lengthOfLongestSubstring = function(s){
  if(s.length <= 1) return s.length
  let max = 0
  let p1 = 0
  let p2 = 1
  while(p2 < s.length) {
    let sameIndex = -1
    for(let i = p1; i < p2; i++){
      if(s[i] === s[p2]){
        sameIndex = i
        break
      }
    }
    let tempMax 
	  if( sameIndex >= 0){
	    tempMax = p2 - p1
	    p1 = sameIndex + 1
	  }else{
	    tempMax = p2 - p1 + 1
	  }
	  if(tempMax > max){
	    max = tempMax
	  }
    p2 += 1
  }
  
  return max
}
gpt：
const lengthOfLongestSubstring = function(s) {
    let left = 0;
    let right = 0;
    let maxLen = 0;
    const charIndex = {};

    while (right < s.length) {
        const currentChar = s[right];

        // 如果字符在窗口中没有重复
        if (charIndex[currentChar] === undefined || charIndex[currentChar] < left) {
            charIndex[currentChar] = right;
            maxLen = Math.max(maxLen, right - left + 1);
            right++;
        } else {
            // 如果字符在窗口中有重复，左指针右移
            left = charIndex[currentChar] + 1;
        }
    }

    return maxLen;
};
使用 map 加速：

var lengthOfLongestSubstring = function(s) {
  if (s.length <= 1)
    return s.length
  let max = 0
  let p1 = 0
  let p2 = 1
  const map = {}
  map[s[p1]] = 0
  while (p2 < s.length) {
    let hasSame = false
    if(s[p2] in map){
      hasSame = true
      if(map[s[p2]] >= p1){
          p1 = map[s[p2]] + 1
      }
    }
    map[s[p2]] = p2
    let tempMax = p2 - p1 + 1
    if(tempMax > max) max = tempMax
    p2 += 1
  }
  return max
};
你会发现，加速失败，可能是 JS 的问题。

改用 new Map() 试试：

var lengthOfLongestSubstring = function(s) {
  if (s.length <= 1)
    return s.length
  let max = 0
  let p1 = 0
  let p2 = 1
  const map = new Map()
  map.set(s[p1], 0)
  while (p2 < s.length) {
    let hasSame = false
    if(map.has(s[p2])){
      hasSame = true
      if(map.get(s[p2]) >= p1){
          p1 = map.get(s[p2]) + 1
      }
    }
    map.set(s[p2],p2)
    let tempMax = p2 - p1 + 1
    if(tempMax > max) max = tempMax
    p2 += 1
  }
  return max
};
你会发现，加速失败，这应该还是 JS 的问题。

29. 刁钻题
a. [1,2,3].map(parseInt)
[1,2,3].map(parseInt)
// 展开
parseInt(1, 0, arr) => parseInt(1) => 1
parseInt(2, 1, arr) => NaN
parseInt(3, 2, arr) => NaN
正确写法

[1,2,3].map((number)=> parseInt(number) )

b. a.x = a = {}
var a = {x: #505}; // 地址 #404
var b = a; // b = #404
a.x = a = {x: 2}; // #505
// #404.x = a = #505
// #404.x = #505
// b.x = {x: 2}
console.log(a.x) // 2
console.log(b.x) // 1
// 答案自己在浏览器运行
这题真变态。

c. if true / function a / a = 2
var a = 0;
if (true) {
    a = 1;
    function a() {return 3}
    a = 2;
    console.log(a); // 2
}
console.log(a); // 1
这题属于未定义行为（见 MDN），实在刁钻，答案并不唯一。但你可以回答「打印 2 和 1」。

Chrome / Edge 运行结果：2、1


Safari 运行结果：2、2


Firefox 运行结果：2、1


30. 答题技巧
抽象问题答具体，具体问题可抽象
举例一：

你如何理解设计模式？
你应该把问题转变成

我是如何理解发布订阅模式、工厂模式、builder 模式的
举例二：

你平时是如何学习编程的？
你说完看书、看博客、看视频和逛论坛是不是就没得说了？可以抽象一点，比如

我主要通过「输入」、「转化」和「输出」来学习。
「输入」是指阅读别人分享的知识，比如看博客、看书。
「转化」是指把知识消化之后变成自己的积累，用自己的知识体系重新阐述一遍新学的概念。
「输出」是指把自己的理解以博客、视频的形式分享给别人。
学会「总-分-总」叙事
听到问题之后，如果觉得问题很复杂，可以先跟面试官确认一下：

你问的是 XXX 吗？
目的有二：

确保自己不要偏题
留给自己一些时间组织语言
然后你可以用这句话开头：

我觉得这个问题可以从两方面考虑
一是……
二是……
如果你说着说着发现新的点，可以接着说

对了，还有一点可以补充……
最后你可以结尾：

我平时就是从这三点来解决类似问题的
这就是「总-分-总」，这种叙事的好处是让你显得思路清晰。

学会放弃，加个但是
如果某个知识点你完全不会，可以直接说「没接触过」。

但是，你一定要加一个「但是」或者「因为」：

因为我平时主要关注的是 XXX 方向，所以你能不能问这个方向的题目呢？
强行把话题转向自己擅长的领域。

如果你没有擅长的领域，就当我没说……

不要冷场超过三秒钟
听完题目如果没思路千万不要闷头想，这样会让气氛变得非常焦灼。

想不到说什么可以向面试官确认或者求面试官给提示。