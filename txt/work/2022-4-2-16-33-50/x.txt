节流
const throttle = (fn,time)=>{
  let timer = null
  return (...args)=>{
    if(timer) return
    fn(...args)
    timer = setTimeout(()=>{
      timer = null
    },time)
  }
}

防抖
const debounce = (fn,time)=>{
  let timer = null
  return (...args)=>{
    clearTimeout(timer)
    timer = setTimeout(()=>{
      fn(...args)
    },time)
  }
}

pnpm create vite@2.9.0 mangosteen-fe-1 -- --template vue-ts

自我介绍
面试官您好，我叫xxx，毕业于xxx学校xxx专业，本科学历。我在上一份工作中主要负责小程序和H5的开发，使用Taro+React技术栈，参与了三款微信小程序的开发、维护与发版，同时也负责了项目中的前端H5部分。在项目中，我曾面临过挑战，比如...，我通过...的方式成功解决了这个问题。

此外，我熟悉Vue，最近的个人项目使用Vue+TSX完成。我还取得了大学英语六级证书，具备良好的英语读写能力。在业余时间，我有写技术博客的习惯，主要在知乎更新，曾分享过关于使用webstorm的经验，阅读量数万。我认为自己是一个对技术充满热情、有着丰富前端经验的人，期待能够为贵公司做出更多贡献。谢谢！

React常用的hooks？
useState，useEffect，useRef，useContext
useMemo:
用于记忆计算值，避免在每次渲染时重新计算。
useRef:
用于获取 DOM 元素或保存可变值。
useReducer:
用于在组件中使用复杂的状态逻辑。
useCallback：
用于记忆回调函数，防止函数在每次渲染时重新创建。

XSS和CSRF？
XSS（Cross Site Script），指跨站脚本攻击。
攻击者脚本 嵌入 被攻击网站，获取用户cookie等隐私信息。
CSRF(Cross Site Request Forgery)指的是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。跨域指的是请求来源于其他网站，伪造指的是非用户自身的意愿。
已登录用户 访问 攻击者网站，攻击网站向被攻击网站发起恶意请求（利用浏览器会自动携带cookie）。

父组件更新了，子组件没更新，子组件会重新渲染吗？
正常是不会的，通过VDOM比较有变动才更新。

在前端路由中，有两种常见的模式：Hash 模式和History 模式。
Hash 模式：
实现方式： 在 URL 中使用哈希（#）来管理路由，例如 http://example.com/#/path。
优点： 兼容性好，因为哈希部分不会被发送到服务器，不会触发页面重新加载。
缺点： 带有 # 符号，不够美观；同时，前端获取路由需要通过监听 hashchange 事件等方式。
History 模式：
实现方式： 利用 HTML5 的 History API，通过 pushState 和 replaceState 可以在不重新加载页面的情况下改变 URL。
优点： URL 更美观，不带 # 符号；前端路由使用起来更像传统的后端路由。
缺点： 兼容性较差，不支持的浏览器需要有备用方案；需要服务器的支持，以避免在刷新页面或直接访问 URL 时返回 404。

12.6：

v-if和v-show的区别？
尬住了，一时没想出来。其实字面意思就是了，if表示有没有，show通过css表示展示与否。

Axios怎么封装的？
TS泛型体操，Axios怎么写返回的参数。
type GetConfig = Omit<AxiosRequestConfig, 'params' | 'url' | 'method'>
type PostConfig = Omit<AxiosRequestConfig, 'url' | 'data' | 'method'>
type PatchConfig = Omit<AxiosRequestConfig, 'url' | 'data'>
type DeleteConfig = Omit<AxiosRequestConfig, 'params'>

export class Http {
  instance: AxiosInstance
  constructor(baseURL: string) {
    this.instance = axios.create({
      baseURL
    })
  }
  get<R = unknown>(url: string, query?: Record<string, JSONValue>, config?: GetConfig) {
    return this.instance.request<R>({ ...config, url: url, params: query, method: 'get' })
  }
  post<R = unknown>(url: string, data?: Record<string, JSONValue>, config?: PostConfig) {
    return this.instance.request<R>({ ...config, url, data, method: 'post' })
  }
  patch<R = unknown>(url: string, data?: Record<string, JSONValue>, config?: PatchConfig) {
    return this.instance.request<R>({ ...config, url, data, method: 'patch' })
  }
  delete<R = unknown>(url: string, query?: Record<string, string>, config?: DeleteConfig) {
    return this.instance.request<R>({ ...config, url: url, params: query, method: 'delete' })
  }
}
在上面提到的代码片段中，<R = unknown> 表示该函数 post 使用了泛型 R，并且默认类型是 unknown。这意味着你可以在使用该函数时，显式指定返回类型，如 post<MyResponseType>(url, data, config)，也可以省略类型参数，此时将使用默认的 unknown 类型。这样的设计提高了函数的灵活性，让它适用于不同类型的返回数据。

protobuff

docker一般怎么用？
docker build
docker run

喉咙不舒服导致胃口不好，但是还是要好好吃饭，按时吃饭吖...


从输入 URL 到展现页面的全过程可以分为以下步骤：

域名解析（DNS Resolution）：
浏览器首先需要将用户输入的域名转换为对应的 IP 地址。这一过程由域名系统（DNS）完成。浏览器首先会检查本地缓存中是否有对应域名的 IP 地址，如果没有，就会向 DNS 服务器发出请求。
建立 TCP 连接（TCP Handshake）：

通过 DNS 解析得到目标服务器的 IP 地址后，浏览器需要和服务器建立 TCP 连接。这是一个三次握手的过程，包括客户端发出连接请求，服务器回应同意连接，最后客户端发送确认。
发起 HTTP 请求：

通过建立的 TCP 连接，浏览器向服务器发送 HTTP 请求。请求中包括请求行（URL、HTTP 方法等）、请求头（包含浏览器信息、客户端支持的压缩算法等）和请求体（对于 POST 请求）。
服务器处理请求：

服务器接收到请求后，根据请求的内容和服务器上的资源，进行相应的处理。这可能涉及到数据库查询、业务逻辑处理等。
服务器返回响应：

服务器处理完请求后，会返回一个 HTTP 响应。响应中包括状态行（表示请求成功或失败的状态码）、响应头（包含服务器信息、内容类型等）和响应体（实际的数据内容）。
浏览器渲染页面：

浏览器接收到服务器返回的响应后，开始解析 HTML、CSS 和 JavaScript。然后构建 DOM 树、CSSOM 树，并将它们合并成渲染树。最终通过布局和绘制阶段完成页面的渲染。
页面加载完毕：

当页面中的所有资源（图片、样式表、脚本等）都加载完成后，页面加载完毕。此时触发 DOMContentLoaded 事件，表示 DOM 树已经构建完成，可以操作 DOM 了。
关闭 TCP 连接：

最后，浏览器和服务器之间的 TCP 连接可以被关闭。这是一个四次挥手的过程，包括客户端发出连接结束请求，服务器回应确认，服务器发出连接结束通知，客户端回应确认。
这是一个简化的描述，实际过程中可能还涉及到缓存机制、安全性检查、重定向等额外步骤。


C/S 架构（Client/Server Architecture）和 B/S 架构（Browser/Server Architecture）是两种不同的软件架构模型，它们主要区分在于客户端和服务器之间的关系。

除了违法犯罪的事情，尽量不做否定发言。 ——某网友

工期问题
预估用时？
越细越好；留好buffer。


在Vuex和localstorage哪个快？Vuex，读的内存。

你了解设计模式吗？单例模式有哪几种？
发布订阅不算吧。
我晕。。
饿汉模式？懒汉模式？前端根本不考虑这些线程安全啊= =
策略模式：策略 + 组合，常用于表单验证
发布-订阅模式：on，trigger
装饰器模式（套皮）、适配器模式（数据转换）
代理模式，不直接操作原有对象，而是委托代理者去进行
责任链模式？它允许你将请求沿着处理者链进行传递，直到有一个处理者能够处理该请求。每个处理者都包含了对下一个处理者的引用，从而形成一条责任链。

12/18
template 编译原理？

  Vue 的模板编译原理是 Vue 框架实现数据绑定和虚拟 DOM 的关键部分之一。下面是 Vue 模板编译的主要步骤：

  1.解析模板： Vue 编译器首先会解析模板字符串，将其转换为抽象语法树（AST，Abstract Syntax Tree）。AST 是一个树状结构，表示代码的抽象语法结构。

  2.优化静态内容： 编译器会对静态内容进行优化，将其中不需要变动的部分提取出来，避免在每次渲染时都重新生成。

  3.生成渲染函数： 将 AST 转换为渲染函数。渲染函数是一个函数，接收数据作为参数，返回虚拟 DOM。

  4.生成虚拟 DOM： 渲染函数执行时，会生成虚拟 DOM（Virtual DOM）树。虚拟 DOM 是一个轻量级的 JavaScript 对象，用于描述真实 DOM 树的结构。

  5.创建 Watcher： 每个使用了响应式数据的组件都会创建一个 Watcher 对象。Watcher 会在组件渲染时订阅数据变化，当数据变化时，会重新执行渲染函数。

  6.渲染： 初次渲染时，将虚拟 DOM 转换为真实 DOM 并插入到页面中。在数据变化时，Watcher 会收到通知，重新执行渲染函数生成新的虚拟 DOM，然后通过比对算法（diff 算法）找出变化的部分，最终更新到真实 DOM 上。

  这个过程中，Vue 利用模板语法中的指令和表达式，将数据和 DOM 进行绑定。这使得当数据发生变化时，Vue 能够高效地更新视图。

  需要注意的是，Vue 的模板编译是在运行时执行的，这也是为什么 Vue 推崇运行时构建（Runtime-only）的原因，避免了在生产环境中需要模板编译器的开销。

watch和watchEffect？

  在 Vue 3 中，watch 和 watchEffect 是用于监视数据变化并执行相应操作的两个 API。它们的主要区别在于响应式数据的追踪方式和使用场景。

  watch
  watch 是一个更灵活的 API，允许你监视特定的数据变化并执行自定义的回调函数。它的基本语法如下：

  javascript
  Copy code
  watch(source, callback, options?)
  source: 要监视的数据源，可以是一个 getter 函数或一个响应式对象/数组的引用。
  callback: 当 source 中的数据发生变化时执行的回调函数。
  options: 可选配置项，用于设置一些选项，例如 deep（是否深度监听）等。
  是否创建时监听：
  handler:function(o,n){},
  immediate: true
  示例：

  javascript
  Copy code
  const data = ref(0);

  watch(data, (newValue, oldValue) => {
    console.log(`Data changed from ${oldValue} to ${newValue}`);
  });
  watchEffect
  watchEffect 是一个更自动的 API，它会自动追踪其回调函数内部使用的响应式数据，并在这些数据变化时重新执行回调函数。它的基本语法如下：

  javascript
  Copy code
  watchEffect(effect, options?)
  effect: 一个包含响应式数据读取操作的函数。Vue 会自动追踪此函数内部使用的响应式数据，并在数据变化时重新执行此函数。
  options: 可选配置项，用于设置一些选项，例如 flush（何时执行回调，是同步还是异步）等。
  示例：

  javascript
  Copy code
  const data = ref(0);

  watchEffect(() => {
    console.log(`Data is: ${data.value}`);
  });
  区别
  watch 需要明确指定要监视的数据，而 watchEffect 会自动追踪函数内部使用的响应式数据。
  watch 的回调函数接收两个参数（新值和旧值），而 watchEffect 的回调函数不接收参数，直接访问响应式数据即可。
  watch 具有更多的配置选项，可以更精细地控制监视行为。
  通常情况下，如果你需要监视特定的数据并执行一些特定的操作，使用 watch；如果你只需要在函数内部自动追踪响应式数据的变化，使用 watchEffect。

js判断类型？判断空数组？

  在 JavaScript 中，可以使用不同的方式来判断一个值的类型。以下是一些常见的方法：

  typeof 操作符：
  使用 typeof 操作符可以获得一个值的基本类型。

  javascript
  Copy code
  typeof 42;          // "number"
  typeof "Hello";     // "string"
  typeof true;        // "boolean"
  typeof undefined;   // "undefined"
  typeof null;        // "object" （注意这是 typeof 的一个历史 bug）
  typeof {};          // "object"
  typeof [];          // "object"
  typeof function(){};// "function"
  注意，typeof null 返回 "object" 是 JavaScript 的一个已知问题。

  Object.prototype.toString：
  使用 Object.prototype.toString 方法可以更精准地获取对象的具体类型。

  javascript
  Copy code
  Object.prototype.toString.call(42);          // "[object Number]"
  Object.prototype.toString.call("Hello");     // "[object String]"
  Object.prototype.toString.call(true);        // "[object Boolean]"
  Object.prototype.toString.call(undefined);   // "[object Undefined]"
  Object.prototype.toString.call(null);        // "[object Null]"
  Object.prototype.toString.call({});          // "[object Object]"
  Object.prototype.toString.call([]);          // "[object Array]"
  Object.prototype.toString.call(function(){});// "[object Function]"
  instanceof 操作符：
  使用 instanceof 操作符可以检查对象是否是某个构造函数的实例。

  javascript
  Copy code
  const obj = {};
  obj instanceof Object;   // true

  const arr = [];
  arr instanceof Array;    // true

  const func = function() {};
  func instanceof Function; // true
  注意，instanceof 在处理原始类型时并不适用。

  Array.isArray：
  使用 Array.isArray 方法可以检查一个值是否是数组。

  javascript
  Copy code
  Array.isArray([]);       // true
  Array.isArray({});       // false
  以上这些方法可以根据具体的使用场景和需求选择。在实际编码中，通常会结合多个方法来完成更全面的类型判断。

  对象判空：Object.keys；for...in + hasOwnProperty；JSON.stringify

||和？？的区别？

  ？？更严格
  
浅拷贝和深拷贝？JSON深拷贝的问题

  浅拷贝和深拷贝是在处理对象和数组时常用的两种拷贝方式，它们的区别在于是否复制了对象或数组中嵌套的对象和数组。

  浅拷贝
  浅拷贝只会复制对象或数组的第一层结构，而不会复制嵌套的对象或数组。JavaScript 中有几种浅拷贝的方法：

  使用扩展运算符（...）：

  javascript
  Copy code
  const originalArray = [1, 2, 3];
  const shallowCopyArray = [...originalArray];

  const originalObject = { a: 1, b: 2 };
  const shallowCopyObject = { ...originalObject };
  使用 Object.assign 方法：

  javascript
  Copy code
  const originalArray = [1, 2, 3];
  const shallowCopyArray = Object.assign([], originalArray);

  const originalObject = { a: 1, b: 2 };
  const shallowCopyObject = Object.assign({}, originalObject);
  深拷贝
  深拷贝会复制对象或数组的所有层级，包括嵌套的对象或数组。实现深拷贝的方法较为复杂，可以使用一些库或手动递归实现。

  使用 Lodash 库：

  Lodash 提供了 _.cloneDeep 方法，用于深拷贝对象或数组。

  javascript
  Copy code
  const _ = require('lodash');

  const originalArray = [1, 2, [3, 4]];
  const deepCopyArray = _.cloneDeep(originalArray);

  const originalObject = { a: 1, b: { c: 2 } };
  const deepCopyObject = _.cloneDeep(originalObject);
  手动递归实现：

  javascript
  Copy code
  function deepClone(obj) {
    if (obj === null || typeof obj !== 'object') {
      return obj;
    }

    if (Array.isArray(obj)) {
      return obj.map(deepClone);
    }

    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [key, deepClone(value)])
    );
  }

  const originalArray = [1, 2, [3, 4]];
  const deepCopyArray = deepClone(originalArray);

  const originalObject = { a: 1, b: { c: 2 } };
  const deepCopyObject = deepClone(originalObject);
  注意：手动递归实现深拷贝可能会有一些性能上的影响，因此在实际项目中建议使用经过测试和优化的库，如 Lodash 的 _.cloneDeep。
  
  JSON深拷贝的问题：
  使用 JSON.stringify 和 JSON.parse 进行深拷贝是一种常见的方式，但它有一些限制和注意事项，可能会导致一些问题：

  1. 循环引用问题：
  如果对象中存在循环引用（对象内部引用自身），则使用 JSON.stringify 会抛出错误，因为 JSON 格式不支持循环引用。

  javascript
  Copy code
  const obj = { a: 1 };
  obj.b = obj;  // 循环引用

  try {
    const deepCopy = JSON.parse(JSON.stringify(obj));  // 抛出错误
  } catch (error) {
    console.error(error);
  }
  2. 丢失特殊对象的信息：
  在对象中，一些特殊的对象属性（例如原型链上的属性、不可枚举属性）以及特殊的对象（例如 RegExp、Date、Map、Set）在经过 JSON 转换后可能会失去原有的信息。

  javascript
  Copy code
  const obj = { date: new Date() };
  const deepCopy = JSON.parse(JSON.stringify(obj));

  console.log(deepCopy.date);  // 日期被转换为字符串
  对于 Date 对象，会被转换为字符串，而不再是一个 Date 对象。

  3. 函数丢失问题：
  包含函数的对象在经过 JSON 转换时，函数会被忽略。

  javascript
  Copy code
  const obj = { func: () => console.log('Hello') };
  const deepCopy = JSON.parse(JSON.stringify(obj));

  console.log(deepCopy.func);  // undefined
  函数属性会被忽略，因为 JSON 不支持序列化函数。

  总体来说，JSON.stringify 和 JSON.parse 是一种简便的深拷贝方式，适用于大多数普通对象和数组的情况。然而，如果你的对象包含循环引用、特殊对象或函数等情况，可能需要考虑其他深拷贝方法，如使用第三方库（如 Lodash 的 _.cloneDeep）或手动递归实现深拷贝。


promise 可以取消吗？

  JavaScript 中的 Promise 本身是不支持取消的，一旦一个 Promise 被创建并开始执行，就会一直执行到完成或被拒绝。这是因为 Promise 是一种表示异步操作最终完成或失败的机制，而取消一个正在执行的异步操作通常需要在异步操作内部支持。

  然而，可以通过其他方式来实现类似取消的效果，比如使用额外的控制变量、AbortController 等。

  使用额外的控制变量：
  可以在执行异步操作的同时使用一个控制变量，当需要取消时，修改该变量的状态，并在异步操作内部检查这个变量状态，然后提前结束操作。

  javascript
  Copy code
  let isCancelled = false;

  const myPromise = new Promise((resolve, reject) => {
    // 异步操作
    if (isCancelled) {
      reject(new Error('Cancelled'));
    } else {
      // 执行异步操作
      // ...
      resolve('Operation completed');
    }
  });

  // 取消操作
  isCancelled = true;
  使用 AbortController：
  AbortController 是一个用于控制异步操作的 API，在需要取消时，可以调用 abort() 方法。

  javascript
  Copy code
  const controller = new AbortController();
  const signal = controller.signal;

  const myPromise = new Promise((resolve, reject) => {
    // 异步操作
    // 在需要取消时
    controller.abort();
  });

  myPromise.catch((err) => {
    if (err.name === 'AbortError') {
      console.log('Operation cancelled');
    } else {
      // 处理其他错误
    }
  });
  请注意，使用额外的控制变量或 AbortController 需要在异步操作内部显式地检查取消状态。并且，并非所有的异步操作都能够被取消，这取决于具体的异步操作的实现。

new 箭头函数会怎样？

  会报错。
  在 JavaScript 中，使用 new 关键字创建对象实例时，会经过以下步骤：

  1.创建一个新的空对象： 一个新的空对象被创建，该对象成为新创建的实例。

  2.将构造函数的作用域赋给新对象（设置对象的原型）： 新对象的 [[Prototype]]（内部属性，可以通过 Object.getPrototypeOf(obj) 获取）被设置为构造函数的 prototype 属性。这一步是为了确保新对象可以访问构造函数原型链上的属性和方法。

  3.执行构造函数： 构造函数被调用，其内部的 this 指向新创建的空对象。这使得构造函数可以通过 this 来操作新对象。

  4.返回新对象： 如果构造函数没有明确返回一个对象，那么 new 表达式将返回新创建的对象实例。如果构造函数显式地返回了一个对象，则返回该对象而不是新创建的实例。

  当你尝试使用 new 关键字调用箭头函数时，会引发 TypeError。这是因为箭头函数没有自己的 this 上下文，它捕获了创建时所在的上下文的 this，而且无法被改变。这使得箭头函数不具备像普通函数那样的构造函数特性。

箭头函数里 settimeout 的函数的 this？ 

  在箭头函数中，this 的值是在函数创建时确定的，而不是在运行时。箭头函数不会创建自己的 this，而是捕获了它所在上下文中的 this，并且不可改变。这是箭头函数与普通函数不同的关键之处。

  具体来说，箭头函数的 this 取决于箭头函数被定义的位置。当箭头函数被创建时，它捕获了所在上下文的 this 值，并在整个生命周期中保持不变。这种行为与普通函数不同，普通函数的 this 的值在运行时会根据调用方式而变化。

两个等于和三个等于？

  在JavaScript中，有两种常见的比较运算符，即"=="（两个等于号）和"==="（三个等于号）。

  双等号 "=="： 它执行弱相等比较，会在比较之前进行类型转换。如果两个操作数的值相等，它们就被认为是相等的，即使它们的数据类型不同。这可能导致一些意外的类型转换，因此通常建议避免在判断相等性时使用双等号。

  javascript
  Copy code
  "5" == 5 // true，进行了类型转换
  三等号 "==="： 它执行严格相等比较，不进行类型转换。只有在值和类型都相等的情况下，它们才被认为是相等的。使用三等号通常更安全，因为它避免了一些可能导致 bug 的隐式类型转换。

  javascript
  Copy code
  "5" === 5 // false，不进行类型转换
  总的来说，推荐使用"==="进行比较，因为它更严格，不会进行类型转换，避免了一些潜在的问题。在某些情况下，使用"=="可能会导致不直观的行为，因此最好在可能的情况下使用"==="。

vue stop，修饰符你知道吗？

  Vue.js 提供了一些常见的事件修饰符，用于修改事件处理函数的行为。以下是一些常见的修饰符：

  1. .stop： 阻止事件冒泡，即阻止事件向上传播到父元素。

  html
  Copy code
  <a @click.stop="handleClick">阻止事件冒泡</a>
  2. .prevent： 阻止默认行为，即取消事件的默认动作。

  html
  Copy code
  <form @submit.prevent="handleSubmit">阻止表单提交</form>
  3. .capture： 添加事件监听器时使用事件捕获模式。

  html
  Copy code
  <div @click.capture="handleClick">捕获模式</div>
  .self： 只当事件是从当前元素本身触发时才触发处理函数。

  html
  Copy code
  <div @click.self="handleClick">只处理自身触发的点击</div>
  4. .once： 事件只触发一次。

  html
  Copy code
  <button @click.once="handleClick">只触发一次</button>
  5. .passive： 指示浏览器不应该阻止事件的默认行为。

  html
  Copy code
  <div @touchstart.passive="handleTouchStart">触摸事件，不阻止默认行为</div>
  这些修饰符可以组合使用，例如：@click.stop.prevent 可以同时阻止事件冒泡和取消默认行为。选择使用哪些修饰符取决于具体的需求和场景。

map和set？

  Map 和 Set 都是 JavaScript 中的集合类型，用于存储多个值。它们有一些相似之处，但在用途和行为上也有一些区别。

  Map
  键值对存储： Map 是一种键值对的集合，其中每个键都是唯一的。
  任何数据类型作为键： 可以使用任何数据类型作为键，包括基本数据类型和对象。
  有序迭代： 在迭代时，Map 会按照元素插入的顺序进行迭代。
  Size 属性： Map 有一个 size 属性，表示其中键值对的数量。
  迭代方法： 提供了 forEach 方法用于迭代，也可以通过 entries、keys 和 values 方法获取键值对、键或值的迭代器。
  javascript
  Copy code
  let myMap = new Map();

  myMap.set('key1', 'value1');
  myMap.set('key2', 'value2');

  console.log(myMap.get('key1')); // 输出 'value1'
  console.log(myMap.size); // 输出 2

  myMap.forEach((value, key) => {
    console.log(key, value);
  });
  Set
  唯一值存储： Set 是一种值的集合，其中每个值都是唯一的。
  任何数据类型作为值： 可以使用任何数据类型作为值，包括基本数据类型和对象。
  无序迭代： 在迭代时，Set 不保证按照插入顺序进行迭代。
  Size 属性： Set 有一个 size 属性，表示其中值的数量。
  迭代方法： 提供了 forEach 方法用于迭代，也可以通过 values 方法获取值的迭代器。
  javascript
  Copy code
  let mySet = new Set();

  mySet.add('value1');
  mySet.add('value2');

  console.log(mySet.has('value1')); // 输出 true
  console.log(mySet.size); // 输出 2

  mySet.forEach(value => {
    console.log(value);
  });
  总结
  使用 Map 当你需要存储键值对，并且对插入顺序敏感时。
  使用 Set 当你只关心唯一值的集合，而不关心顺序时。

css3新增了哪些特性？

  CSS3 引入了许多新特性，扩展了对样式和布局的控制。以下是一些 CSS3 的主要新增特性：

  Flexbox 布局： 引入了 Flexbox（弹性盒子布局），使得更灵活的、自适应的页面布局变得更容易实现。

  Grid 布局： 引入了 Grid 布局系统，允许开发者以更直观的方式定义复杂的网格结构，实现更复杂的页面布局。

  多列布局（Multiple Columns）： 允许将文本分为多列，使得文本排版更灵活，适应不同尺寸的屏幕。

  自定义字体（@font-face）： 允许网页设计师使用自定义字体，而不仅仅局限于用户设备上已安装的字体。

  过渡效果（Transitions）： 引入了过渡效果，使得在状态变化时能够平滑过渡，提升用户体验。

  变形效果（Transforms）： 允许元素进行旋转、缩放、平移和倾斜，为实现动画效果提供更多可能性。

  动画效果（Animations）： 引入了关键帧动画（Keyframes），使得开发者能够创建更为复杂的动画效果。

  渐变（Gradients）： 支持线性渐变和径向渐变，使得背景和元素颜色可以更灵活地定义。

  圆角边框（Border-radius）： 允许为元素的边框添加圆角，实现更圆润的界面。

  阴影（Box-shadow）： 允许为元素添加投影效果，增强元素的立体感。

  透明度（Opacity）： 允许设置元素的透明度，创建半透明效果。

  颜色和透明度的 RGBA 和 HSLA： 引入了 RGBA（红绿蓝和透明度）和 HSLA（色调、饱和度、亮度和透明度）颜色表示方式。

  用户界面样式（User Interface）： 允许样式化滚动条、调整拖拽区域的样式等。

  这些是 CSS3 中的一些重要特性，它们使得前端开发者能够更灵活地控制页面的样式和布局。请注意，由于 CSS 标准的不断发展，可能会有新的特性被引入或旧的特性发生变化。

vue常见插槽？

  Vue.js 提供了一些内置的插槽，用于在组件中进行灵活的内容分发。以下是一些常见的内置插槽：

  1.默认插槽（default）：

  插槽名称：没有指定名称的插槽，默认插槽。
  使用方式：直接将内容放置在组件标签之间。
  html
  Copy code
  <my-component>
    <!-- 默认插槽的内容 -->
    <p>Hello, world!</p>
  </my-component>

  2.具名插槽：

  插槽名称：通过 v-slot 指令指定的插槽名称。
  使用方式：使用 v-slot 指令指定插槽名称，将内容放置在相应的插槽中。
  html
  Copy code
  <my-component>
    <template v-slot:header>
      <!-- 具名插槽 header 的内容 -->
      <h1>Page Title</h1>
    </template>

    <template v-slot:footer>
      <!-- 具名插槽 footer 的内容 -->
      <p>Copyright © 2023</p>
    </template>
  </my-component>

  3.作用域插槽（scoped）：

  插槽名称：通过 v-slot 指令指定的插槽名称，使用 slot-scope 或 # 简写。
  使用方式：使用 v-slot 指令指定插槽名称，同时通过 slot-scope 或 # 简写获取插槽中的数据。
  html
  Copy code
  <my-component>
    <template v-slot:default="slotProps">
      <!-- 作用域插槽的内容，可以访问 slotProps 中的数据 -->
      <p>{{ slotProps.item }}</p>
    </template>
  </my-component>
  这些插槽使得组件更加灵活，能够接受不同的内容和数据。在使用插槽时，组件作者可以提供一些默认的内容，同时也给予使用者覆盖或扩展的机会。插槽是 Vue 组件中非常强大和重要的特性之一。

tostring 为什么会不一样？

  const obj = {};
  const objToString = Object.prototype.toString.call(obj);
  console.log(objToString); // 输出 "[object Object]"

ts的readonly和const？

  1.const 用于变量， readonly 用于属性

  2.const 在运行时检查， readonly 在编译时检查

  3.const 声明的变量不得改变值，这意味着，const 一旦声明变量，就必须立即初始化，不能留到以后赋值； readonly 修饰的属性能确保自身不能修改属性，但是当你把这个属性交给其它并没有这种保证的使用者（允许出于类型兼容性的原因），他们能改变

  const foo: {
    readonly bar: number;
  } = {
    bar: 123
  };

  function iMutateFoo(foo: { bar: number }) {
    foo.bar = 456;
  }

  iMutateFoo(foo);
  console.log(foo.bar); // 456
  此时，需要 iMutateFoo 明确的表示，他们的参数不可修改，那么编译器会发出错误警告：

  function iTakeFoo(foo: Foo) {
    foo.bar = 456; // Error: bar 属性只读
  }
  4.const 保证的不是变量的值不得改动，而是变量指向的那个内存地址不得改动，例如使用 const 变量保存的数组，可以使用 push ， pop 等方法。但是如果使用 ReadonlyArray<number> 声明的数组不能使用 push ， pop 等方法。

async和await实现原理？

  async 和 await 是 ECMAScript 2017 (ES8) 中引入的一组特性，用于更方便地处理异步代码。它们的实现原理基于 Promise。

  1.async 函数：

  async 函数返回一个 Promise 对象。在函数体内，通过 await 关键字来等待 Promise 对象的解决或拒绝。
  当函数内部有异步操作时，函数会被自动包装成一个 Promise 对象。
  javascript
  Copy code
  async function exampleAsyncFunction() {
    return 42;
  }

  exampleAsyncFunction().then(result => {
    console.log(result); // 输出: 42
  });
  2.await 表达式：

  await 关键字只能在 async 函数内部使用。
  当 await 关键字用于等待一个 Promise 完成时，它会暂停函数的执行，直到 Promise 解决或拒绝。
  javascript
  Copy code
  async function exampleAsyncFunction() {
    const result = await someAsyncOperation();
    console.log(result);
  }
  3.Promise 原理：

  async 函数的实现依赖于 Promise 对象。当 async 函数执行时，它会返回一个 Promise，该 Promise 在函数内部执行异步操作时被 resolve 或 reject。
  await 表达式实际上是 Promise 的语法糖，它暂停 async 函数的执行，等待 Promise 解决，然后将解决的值返回。
  javascript
  Copy code
  function asyncFunction() {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve(42);
      }, 1000);
    });
  }

  async function exampleAsyncFunction() {
    const result = await asyncFunction();
    console.log(result); // 输出: 42
  }

  exampleAsyncFunction();
  总体来说，async 和 await 的实现基于 Promise 对象，使得异步代码的编写和理解更加清晰和简单。async 函数返回的 Promise 对象会根据函数内部的执行情况进行解决或拒绝。await 表达式在等待 Promise 完成时暂停函数的执行，直到 Promise 完成。

src和href？

  src 和 href 是 HTML 中两个常见的属性，它们分别用于不同的情境。

  src 属性：

  src 是 "source" 的缩写，通常用于指定外部资源（比如图片、脚本、嵌套的页面等）的路径。
  对于脚本（如 JavaScript）和嵌套的页面（如 iframe），src 属性指定了要加载的资源的 URL。
  当浏览器解析到带有 src 属性的标签时，会立即加载并执行这个资源。
  html
  Copy code
  <!-- 示例：加载外部图片 -->
  <img src="example.jpg" alt="Example Image">

  <!-- 示例：引入外部 JavaScript 文件 -->
  <script src="example.js"></script>
  href 属性：

  href 是 "hypertext reference" 的缩写，主要用于指定超链接的目标。
  用于链接样式表、页面之间的链接以及其他需要超链接的场合。
  当浏览器解析到带有 href 属性的标签时，会根据该属性的值导航到对应的目标。
  html
  Copy code
  <!-- 示例：链接样式表 -->
  <link rel="stylesheet" href="styles.css">

  <!-- 示例：超链接 -->
  <a href="https://www.example.com">Visit Example</a>
  总结：

  src 通常用于指定要嵌入文档的外部资源的位置。
  href 通常用于指定超链接的目标，或者在链接样式表时指定样式表文件的位置。
  虽然它们在用途上有区别，但实际上，这只是一种约定，浏览器在处理不同标签和属性时有不同的行为。

enum和常量枚举（const枚举）？

  使用枚举可以清晰地表达意图或创建一组有区别的用例

  // 枚举
  enum Color {
    Red,
    Green,
    Blue
  }

  // 常量枚举
  const enum Color {
    Red,
    Green,
    Blue
  }
  区别
  枚举会被编译时会编译成一个对象，可以被当作对象使用
  const 枚举会在 typescript 编译期间被删除，const 枚举成员在使用的地方会被内联进来，避免额外的性能开销
  // 枚举
  enum Color {
    Red,
    Green,
    Blue
  }

  var sisterAn = Color.Red
  // 会被编译成 JavaScript 中的 var sisterAn = Color.Red
  // 即在运行执行时，它将会查找变量 Color 和 Color.Red
  // 常量枚举
  const enum Color {
    Red,
    Green,
    Blue
  }

  var sisterAn = Color.Red
  // 会被编译成 JavaScript 中的 var sisterAn = 0
  // 在运行时已经没有 Color 变量

ref和reactive

  在 Vue 3 中，ref 和 reactive 是 Vue 3 Composition API 提供的两个用于处理响应式数据的函数。

  ref：

  ref 用于创建一个包装基本类型的响应式对象，例如数字、字符串等。
  返回一个包含 value 属性的对象，通过访问这个对象的 value 属性来读取和修改包装的值。
  ref 的使用场景主要是处理简单的基本类型数据。
  javascript
  Copy code
  import { ref } from 'vue';

  const count = ref(0);

  console.log(count.value); // 读取值
  count.value++; // 修改值
  reactive：

  reactive 用于创建一个包装对象的响应式代理，可以处理复杂的对象和嵌套结构。
  返回一个代理对象，直接访问这个对象的属性即可触发响应式更新。
  reactive 的使用场景主要是处理复杂的对象，如包含嵌套结构的数据。
  javascript
  Copy code
  import { reactive } from 'vue';

  const person = reactive({
    name: 'John',
    age: 25,
    address: {
      city: 'New York',
      zip: '10001'
    }
  });

  console.log(person.name); // 读取值
  person.age++; // 修改值
  总体而言，ref 适用于简单的基本类型数据，而 reactive 适用于复杂的对象和嵌套结构。在实际应用中，你可以根据数据的特性选择使用其中之一，或者根据需要混合使用。Composition API 的灵活性允许你更自由地组织和处理组件内的响应式数据。

foreach 和 map 会改原数组吗

  forEach 和 map 都是用来遍历数组的方法，但它们在处理原数组的方式上有一些不同。

  1.forEach：

  forEach 是一个遍历数组的方法，它接受一个回调函数作为参数，并对数组中的每个元素都执行一次这个回调函数。forEach 不会创建新的数组，而是直接在原数组上进行操作。它不返回新的数组，返回值是 undefined。
  forEach 的回调函数可以改变原数组中的元素，但不能改变数组的长度。
  javascript
  Copy code
  const numbers = [1, 2, 3];

  numbers.forEach((num, index, array) => {
    array[index] = num * 2;
  });

  console.log(numbers); // [2, 4, 6]

  2.map：

  map 也是用于遍历数组的方法，它创建一个新的数组，将每个元素都传递给回调函数，并将回调函数的返回值存储在新数组中。map 不会改变原数组，而是返回一个新的数组。
  map 的回调函数可以改变元素的值，但不会改变原数组。
  javascript
  Copy code
  const numbers = [1, 2, 3];

  const doubledNumbers = numbers.map(num => num * 2);

  console.log(numbers); // [1, 2, 3]
  console.log(doubledNumbers); // [2, 4, 6]
  总体而言，如果你希望在遍历数组时修改原数组，可以使用 forEach。如果你想要创建一个新的数组，其中包含对每个元素应用某个操作的结果，可以使用 map。

数组常用方法？数组怎么转字符串？

  数组常用方法有很多，以下是一些常见的数组方法：

  遍历数组：

  forEach()：对数组的每个元素执行一次提供的函数。
  map()：创建一个新数组，其结果是该数组中的每个元素调用一个提供的函数。
  filter()：创建一个新数组，其中包含通过测试的所有元素。
  reduce()：对数组的每个元素执行一个累积操作，返回最终累积的结果。
  修改数组：

  push()：将一个或多个元素添加到数组的末尾。
  pop()：删除数组的最后一个元素。
  shift()：删除数组的第一个元素。
  unshift()：将一个或多个元素添加到数组的开头。
  splice()：从数组中添加或删除元素。
  查询数组：

  indexOf()：返回数组中指定元素的第一个索引，如果不存在则返回 -1。
  lastIndexOf()：返回数组中指定元素的最后一个索引，如果不存在则返回 -1。
  includes()：判断数组是否包含指定元素。
  数组转换：

  join()：将数组的所有元素连接成一个字符串。
  toString()：将数组转换为字符串。
  concat()：连接两个或多个数组。
  其他：

  sort()：对数组进行排序。
  reverse()：颠倒数组中元素的顺序。
  slice()：提取数组的一部分。
  数组转字符串的方法：

  join() 方法：

  join() 方法将数组的所有元素连接成一个字符串。可以传递一个字符串作为参数，该字符串将作为分隔符插入到数组元素之间。
  javascript
  Copy code
  const fruits = ['apple', 'banana', 'orange'];
  const result = fruits.join(', '); // 使用逗号和空格连接数组元素
  console.log(result); // "apple, banana, orange"
  toString() 方法：

  toString() 方法是 JavaScript 中数组的原生方法，它将数组转换为一个字符串。
  javascript
  Copy code
  const fruits = ['apple', 'banana', 'orange'];
  const result = fruits.toString();
  console.log(result); // "apple,banana,orange"
  注意：这两种方法都不会修改原始数组，而是返回一个新的字符串。

你怎么理解vue 单向数据流？

  Vue 单向数据流是指数据在应用中的流动方向是单向的，从父组件传递到子组件。这种数据流的单向性是 Vue 中数据管理的一个重要原则，它有助于组件之间的数据传递和状态管理，提高了程序的可维护性和可理解性。

  具体而言，Vue 单向数据流体现在以下几个方面：

  父子组件关系：

  数据流向是从父组件传递到子组件。父组件通过 props 将数据传递给子组件。
  html
  Copy code
  <!-- 父组件 -->
  <template>
    <ChildComponent :message="parentMessage" />
  </template>

  <script>
  import ChildComponent from './ChildComponent.vue';

  export default {
    data() {
      return {
        parentMessage: 'Hello from parent!'
      };
    },
    components: {
      ChildComponent
    }
  };
  </script>
  html
  Copy code
  <!-- 子组件 -->
  <template>
    <div>{{ message }}</div>
  </template>

  <script>
  export default {
    props: ['message']
  };
  </script>
  子组件不直接修改父组件的数据：

  子组件通过触发事件（emit）来通知父组件修改数据。子组件应该保持对父组件数据的只读访问。
  html
  Copy code
  <!-- 子组件 -->
  <template>
    <button @click="notifyParent">Click me</button>
  </template>

  <script>
  export default {
    methods: {
      notifyParent() {
        this.$emit('notify', 'Hello from child!');
      }
    }
  };
  </script>
  html
  Copy code
  <!-- 父组件 -->
  <template>
    <ChildComponent @notify="handleNotify" />
  </template>

  <script>
  import ChildComponent from './ChildComponent.vue';

  export default {
    methods: {
      handleNotify(message) {
        console.log(message); // "Hello from child!"
      }
    },
    components: {
      ChildComponent
    }
  };
  </script>
  Vuex 状态管理：

  对于大型应用，Vue 推荐使用 Vuex 进行状态管理。Vuex 中的状态是响应式的，但只能通过 mutations 来修改，确保了对状态的修改是可追踪的。
  javascript
  Copy code
  // Vuex store 中的 state 和 mutation 示例
  const store = new Vuex.Store({
    state: {
      count: 0
    },
    mutations: {
      increment(state) {
        state.count++;
      }
    }
  });
  通过这种单向数据流的机制，Vue 确保了数据的可追踪性、可预测性，使得应用的数据管理更加清晰和易于维护。

vue怎么传数据，子组件能改父组件数据吗？

  通过props传，
  可以改，但如果子组件直接修改了父组件的数据，父组件的数据发生变化，但视图不会立即更新。
  这是因为 Vue 的响应式系统是基于 JavaScript 的 getter 和 setter 实现的，当你直接修改一个对象或数组的属性时，Vue 无法捕捉到这种变化。

  然而，Vue 提供了一些方法来强制触发视图更新：

  this.$forceUpdate()： 这个方法可以用于强制当前组件重新渲染。但要注意，$forceUpdate 并不会触发子组件的重新渲染。

  Vue.set 或 this.$set： 当你需要在对象上添加新属性时，可以使用 Vue.set 或 this.$set 方法，这样 Vue 就能够监听到变化。对于数组，使用 splice 或 slice 方法同样能触发更新。

  javascript
  Copy code
  // 对象
  Vue.set(this.parentData, 'newProperty', 'new value');
  // 或者
  this.$set(this.parentData, 'newProperty', 'new value');

  // 数组
  this.parentData.splice(index, 1, newValue);
  // 或者
  this.parentData = this.parentData.slice();
  虽然可以采用以上方法强制更新视图，但这并不是推荐的做法。更好的方式是遵循 Vue 的设计原则，通过事件（$emit）来进行组件之间的通信，让父组件监听事件并在事件处理函数中修改数据。这样可以保持代码的可维护性和清晰性。

vue生命周期？

  Vue 实例有多个生命周期钩子，这些钩子函数提供了在实例生命周期不同阶段执行代码的机会。以下是 Vue 2.x 版本的生命周期钩子函数：

  beforeCreate： 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。

  created： 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前尚不可用。

  beforeMount： 在挂载开始之前被调用：相关的 render 函数首次被调用。

  mounted： el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。

  beforeUpdate： 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。

  updated： 由于数据更改导致的虚拟 DOM 重新渲染和打补丁后调用。

  beforeDestroy： 在实例销毁之前调用。在这一步，实例仍然完全可用。

  destroyed： 在实例销毁后调用。该钩子被调用后，Vue 实例指示的所有东西都会解绑，所有事件监听器会被移除，所有子实例也会被销毁。

  此外，还有一些较少使用的钩子函数，如 errorCaptured、activated 和 deactivated。这些钩子函数提供了更灵活的控制和响应实例生命周期的方式。

  在 Vue 3.x 中，生命周期钩子的名称和调用时机有些变化，但整体结构基本相似。请根据你所使用的 Vue 版本查阅相应的文档。


12/21
为什么不用NodeJS而用Ruby on Rails?

  选择使用Node.js或Ruby on Rails取决于项目的需求、团队的经验、个人偏好等多个因素。当别人问你为什么选择Ruby on Rails而不是Node.js时，你可以考虑以下一些方面作为回答的参考：

  1.开发速度：

  强调Ruby on Rails的约定大于配置的理念，以及其提供的代码生成器和内置功能，可以加速开发过程。
  2.开发人员体验：

  Ruby on Rails以简洁而富有表达力的语法而闻名，这可以提高开发人员的工作效率和愉悦度。
  社区和生态系统：

  强调Ruby on Rails拥有强大的社区支持和丰富的Gem生态系统，让你能够快速找到解决方案，并使用现成的库和工具。
  3.约定大于配置：

  Ruby on Rails采用约定大于配置的原则，提供了一套默认的最佳实践，这可以减少项目中的配置和规范。
  4.全栈框架：

  Ruby on Rails是一个全栈框架，提供了一整套解决方案，包括数据库访问、路由、模板引擎等，使得构建整体功能的过程更加顺畅。
  5.团队技能：

  如果你的团队成员更熟悉Ruby on Rails，选择该框架可能会提高团队的效率。技术栈的选择通常也受到团队成员的技能和经验的影响。
  特定需求：

  某些项目可能对特定的框架或语言有需求，比如特定的扩展、库或插件。如果Ruby on Rails正好满足这些需求，那么选择它是有道理的。
  在回答这个问题时，最好能够根据具体的项目需求和团队情况提供具体的原因。同时，强调选择任何技术栈都是基于实际情况和团队的需求，没有绝对的对错。

斐波那契数列求 n ...

  斐波那契数列是一组数列，其中每个数是前两个数的和。数学上，它可以递归地定义为：

  F(n)=F(n−1)+F(n−2)

  其中，F(0)=0，F(1)=1。

  在编程中，可以使用递归或迭代的方式来计算斐波那契数列的第 n 项。下面是两种常见的方法：

  递归方法：
  javascript
  Copy code
  function fibonacciRecursive(n) {
    if (n <= 1) {
      return n;
    } else {
      return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
    }
  }

  // 示例
  const result = fibonacciRecursive(5); // 第5项是 5
  console.log(result);
  这种方法简单直观，但在计算较大的斐波那契数时，会因为重复计算而效率较低。

  迭代方法：
  javascript
  Copy code
  function fibonacciIterative(n) {
    let a = 0, b = 1, temp;

    for (let i = 2; i <= n; i++) {
      temp = a + b;
      a = b;
      b = temp;
    }

    return n === 0 ? a : b;
  }

  // 示例
  const result = fibonacciIterative(5); // 第5项是 5
  console.log(result);
  迭代方法避免了递归中的重复计算，因此在大多数情况下更有效。这里使用了两个变量 a 和 b 来存储中间结果，通过循环逐步计算得到第 n 项。

  选择递归还是迭代取决于具体的需求和性能要求。在计算较大的斐波那契数列时，迭代通常更为高效。

前端在从输入url到网页展示内容的过程中有哪些涉及了缓存

  在前端从输入URL到网页展示内容的过程中，涉及了多个环节和阶段，其中一些可能涉及到缓存。以下是一些可能涉及到缓存的阶段：

  1.DNS 缓存：

  当用户输入URL时，浏览器首先需要解析域名到IP地址。这个过程中可能涉及到本地DNS缓存和系统DNS缓存。如果之前已经解析过相同的域名，浏览器可以直接使用缓存中的IP地址，而无需发起新的DNS查询。

  2.浏览器缓存：

  浏览器会将已经访问过的资源缓存到本地，包括HTML、CSS、JavaScript文件、图片等。如果网站的资源在一定时间内没有发生变化，浏览器可以直接从缓存中加载资源，而不需要重新下载。

  3.HTTP 缓存：

  服务器通过HTTP响应头中的缓存控制字段（如Cache-Control和Expires）来控制浏览器是否缓存资源以及缓存的有效期。浏览器在请求资源时会检查这些响应头，从而判断是否使用缓存。

  4.Service Worker 缓存：

  如果网站使用了Service Worker，它可以拦截和处理网络请求，实现自定义的缓存逻辑。Service Worker 可以将资源缓存到本地，从而实现离线访问和更高级的缓存控制。

  5.前端框架和库的缓存：

  如果你使用了一些前端框架或库，这些框架和库的代码文件也可能会被浏览器缓存。当用户再次访问相同的页面时，这些文件可以直接从缓存中加载，而无需重新下载。

  6.CDN 缓存：

  如果网站使用了内容分发网络（CDN），CDN服务器可能会缓存网站的静态资源，从而加速资源的加载速度。CDN缓存通常由CDN提供商管理。
  总体而言，缓存是提高网页加载速度和减轻服务器压力的重要机制。但需要注意，缓存可能导致问题，例如当资源发生变化时可能无法立即更新，因此在开发和部署过程中，需要注意缓存策略的设置和管理。

http缓存有哪些？有什么区别？应用场景有什么？

  HTTP缓存有多种策略，其中一些常见的包括：

  1.强缓存（Expires 和 Cache-Control）：

  Expires： 服务器在响应头中返回一个过期时间，表示资源在这个过期时间之前可直接从浏览器缓存中加载，无需再向服务器发起请求。缺点是它依赖于客户端和服务器的时间一致性。
  http
  Copy code
  Expires: Wed, 21 Oct 2023 07:28:00 GMT
  Cache-Control： 使用Cache-Control可以更精确地定义缓存策略，可以设置max-age表示资源在指定秒数内有效。
  http
  Copy code
  Cache-Control: max-age=3600

  2.协商缓存（Last-Modified 和 ETag）：

  Last-Modified： 服务器在响应头中返回资源的最后修改时间。浏览器再次请求资源时，通过If-Modified-Since头部将上次的最后修改时间发送给服务器，如果资源在这个时间之后未发生修改，服务器返回304状态，告诉浏览器可以使用本地缓存。
  http
  Copy code
  Last-Modified: Tue, 20 Oct 2023 14:30:00 GMT
  ETag： 服务器返回一个唯一的标识符（通常是资源的哈希值），浏览器再次请求资源时通过If-None-Match头部将上次的标识符发送给服务器，如果标识符匹配，服务器返回304状态。
  http
  Copy code
  ETag: "abc123"
  缓存控制策略的组合：

  开发者可以同时使用强缓存和协商缓存来实现更灵活的缓存策略。例如，可以使用Cache-Control的max-age设置强缓存，同时使用Last-Modified或ETag实现协商缓存。
  区别：
  强缓存： 完全绕过了服务器，直接从本地缓存中获取资源，不会发起请求，适用于不经常变化的静态资源。

  协商缓存： 发起了请求，但服务器可以告诉浏览器资源未发生变化，可以使用本地缓存，适用于可能发生变化的资源。

  应用场景：
  强缓存适用于：

  不经常变化的静态资源，如图片、CSS文件、JS文件等。
  需要优化加载速度的页面元素。
  协商缓存适用于：

  经常变化但可能未变化的资源，如动态生成的内容。
  对带宽敏感或资源容易更新的情况，可以减少不必要的请求次数。
  组合使用：

  可以结合使用强缓存和协商缓存，根据资源的特性选择合适的缓存策略。
  综合使用强缓存和协商缓存可以更灵活地控制缓存策略，提高页面性能和用户体验。

有哪些知道的算法？

  只说了个冒泡= =
  搜索，排序，递归与分治，回溯，动态规划，贪心，字符串匹配，图的最小路径

  前端开发中，涉及到的算法种类繁多，而具体需要掌握哪些算法很大程度上取决于你的项目需求和所处域。以下是一些在前端开发中比较常见的算法：

  1.搜索算法：

  二分查找： 在有序数组中查找特定元素。
  深度优先搜索（DFS）和广度优先搜索（BFS）： 用于图遍历或树遍历。
  
  2.排序算法：

  冒泡排序、选择排序、插入排序： 简单的排序算法。
  快速排序、归并排序： 高效的排序算法。
  
  3.递归与分治算法：

  递归： 通过函数调用自身解决问题。
  分治： 将问题分解成子问题然后组合结果。
  
  4.动态规划：

  背包问题、最长递增子序列（LIS）： 优化问题的解决方案。
  斐波那契数列： 使用动态规划进行优化。
  
  5.图算法：

  最短路径算法（Dijkstra、Bellman-Ford）： 在图中找到最短路径。
  拓扑排序： 对有向无环图进行排序。
  
  6.字符串匹配算法：

  KMP算法： 高效地在长字符串中找到模式串的位置。
  
  7.贪心算法：

  零钱兑换问题： 找到满足某个条件的最小数量。
  
  8.位运算：

  异或操作： 用于交换两个数、判断奇偶等。
  位掩码： 通过位运算进行状态管理。
  
  9.回溯算法：

  八皇后问题、子集、组合问题： 在所有可能的解中搜索满足条件的解。
  
  10.算法复杂度分析：

  理解时间复杂度和空间复杂度，分析算法的效率。

  这只是一个概览，具体的应用场景和需求可能需要更深入的算法知识。在实际的前端开发中，通常更关注数据结构和算法如何应用于解决具体的问题，而不仅仅是学习算法本身。例如，前端开发中常涉及到对数组、链表、树等数据结构的操作，以及对搜索、排序等算法的使用。

一个并发控制的函数

  下面是一个简单的手写并发控制函数的例子，使用了JavaScript中的Promise和setTimeout：

  javascript
  Copy code
  function concurrentControl(tasks, concurrency) {
    const results = [];
    let index = 0;

    return new Promise((resolve, reject) => {
      function runNext() {
        if (index === tasks.length) {
          resolve(results);
          return;
        }

        const task = tasks[index];
        index++;

        const currentTask = task().then(result => {
          results.push(result);
        });

        currentTask.then(() => {
          runNext();
        });

        // 控制并发数
        if (index - results.length < concurrency) {
          runNext();
        }
      }

      runNext();
    });
  }

  // 示例用法
  const asyncTask = (id) => {
    return new Promise(resolve => {
      setTimeout(() => {
        console.log(`Task ${id} completed`);
        resolve(`Task ${id} result`);
      }, 2000);
    });
  };

  const tasks = [
    () => asyncTask(1),
    () => asyncTask(2),
    () => asyncTask(3),
    () => asyncTask(4),
    () => asyncTask(5)
  ];

  concurrentControl(tasks, 2)
    .then(results => {
      console.log('All tasks completed:', results);
    })
    .catch(error => {
      console.error('Error:', error);
    });
  这个函数 concurrentControl 接受两个参数，一个是任务数组 tasks，另一个是并发数 concurrency。它返回一个 Promise，在所有任务完成时解析，并将结果数组传递给 resolve。函数内部使用递归和 setTimeout 来控制任务的并发执行。

  这只是一个简单的示例，实际应用中可能需要更多的错误处理和逻辑。此外，还可以使用现代JavaScript工具，如 async/await、Promise.all等，来更方便地实现并发控制。

  使用现代JavaScript：
  
  当我们希望限制并发执行异步任务的数量时，可以使用现代 JavaScript 中的 async/await 和 Promise 的特性。以下是一个简单的手写并发控制函数的例子：

  javascript
  Copy code
  async function concurrentControl(tasks, concurrency) {
    const results = [];
    const runningTasks = [];

    async function runTask(task) {
      const result = await task();
      results.push(result);
    }

    for (const task of tasks) {
      const taskPromise = runTask(task);
      runningTasks.push(taskPromise);

      if (runningTasks.length >= concurrency) {
        // 控制并发数
        await Promise.race(runningTasks);
      }
    }

    // 等待所有任务完成
    await Promise.all(runningTasks);

    return results;
  }

  // 示例用法
  const asyncTask = (id) => {
    return new Promise(resolve => {
      setTimeout(() => {
        console.log(`Task ${id} completed`);
        resolve(`Task ${id} result`);
      }, 1000);
    });
  };

  const tasks = [
    () => asyncTask(1),
    () => asyncTask(2),
    () => asyncTask(3),
    () => asyncTask(4),
    () => asyncTask(5),
  ];

  concurrentControl(tasks, 2)
    .then(results => {
      console.log('All tasks completed:', results);
    })
    .catch(error => {
      console.error('Error:', error);
    });
  在这个例子中，concurrentControl 函数接收一个任务数组 tasks 和并发数 concurrency。它使用 async/await 和 Promise 来控制并发执行任务，确保不超过指定的并发数。Promise.race 用于在任务中有空闲位置时，等待其中一个任务完成，从而维持并发数。

前端并发数一般控制在几个？

  前端并发数的合适值取决于具体的应用场景和需求。一般来说，前端并发数的设置需要考虑以下几个因素：

  网络带宽和延迟： 如果网络带宽较大且延迟较低，可以考虑增加并发数，以提高资源加载速度。在高延迟网络环境下，适度的并发数可以减少等待时间。

  服务器负载： 如果服务器能够处理大量并发请求，可以适度增加前端的并发数。然而，如果服务器资源受限，设置过高的并发数可能导致服务器过载，影响性能。

  用户体验： 并发数的设置也会影响用户体验。在某些情况下，适度的并发数可以提高页面的加载速度，从而改善用户体验。然而，设置过高的并发数可能导致页面阻塞或资源争用，影响用户感知。

  浏览器性能： 不同浏览器对并发请求数量有一些限制，因此需要考虑浏览器的性能和支持程度。一般而言，现代浏览器支持较多的并发请求数。

  业务需求： 具体的业务需求也是一个关键因素。某些场景下可能需要较高的并发数，例如大量图片资源需要同时加载。而在其他场景，可能更注重资源加载的顺序和优先级。

  通常情况下，前端开发者会根据具体需求和实际测试结果来调整并发数。一般而言，初始的并发数可以设置在 4 到 8 之间，然后通过性能测试和监测逐步调整，找到最适合具体应用场景的值。需要注意的是，并发数的设置是一个动态的过程，随着应用和网络环境的变化可能需要不断优化。

项目亮点难点？

  H5的适配，绝对定位元素在背景，取屏幕宽高跟画布宽高生成缩放比，wx.loadFontFace动态加载字体，根据json数据计算出动态css。


